{"ast":null,"code":"var _jsxFileName = \"/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/Network.js\";\nimport { useState } from 'react';\nimport './App.css';\nimport api from \"./api\";\nimport React from \"react\";\nimport Validation from './Validation';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\n\nfunction Network() {\n  //radio selector\n  const [radioSelected, setRadioSelected] = React.useState(\"radiodhcp\");\n  const [stateRadioDhcp, setStateRadioDhcp] = React.useState(true);\n  const [stateRadioStatic, setStateRadioStatic] = React.useState(false); //Errors\n\n  const [form, setForm] = useState({\n    address: \"\",\n    gateway: \"\",\n    netmask: \"255.255.255.0\",\n    dnsprimary: \"\",\n    dnssecondary: \"\"\n  });\n  const [errors, setErrors] = useState({\n    address: \"\",\n    gateway: \"\",\n    netmask: \"\",\n    dnsprimary: \"\",\n    dnssecondary: \"\"\n  }); //disable componets\n\n  const [ipAddressDisabled, setIpAddressdDisabled] = React.useState(true);\n  const [gatewayDisabled, setGatewayDisabled] = React.useState(true);\n  const [netmaskDisabled, setNetmaskDisabled] = React.useState(true);\n  const [dnsPrimaryDisabled, setDnsPrimaryDisabled] = React.useState(true);\n  const [dnsSecondaryDisabled, setDnsSecondaryDisabled] = React.useState(true); //Response from yeico appliance\n\n  const [responseString, setResponseString] = React.useState(\"\"); //Alerts\n\n  const [isValid, setIsValid] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  function validateIPaddress(ipaddress) {\n    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function setDisabledComponents(state) {\n    setIpAddressdDisabled(state);\n    setGatewayDisabled(state);\n    setNetmaskDisabled(state);\n    setDnsPrimaryDisabled(state);\n    setDnsSecondaryDisabled(state);\n  }\n\n  function parseIP(key) {\n    var addresswithpoints = `${JSON.stringify(key)}`.replace(/,/g, \".\");\n    return addresswithpoints.replace(/[[\\]']/g, \"\");\n  } //manage state radios\n\n\n  function ButtonSelectRadio_Click(event) {\n    if (event.target.id === \"radiodhcp\") {\n      setStateRadioDhcp(true);\n      setStateRadioStatic(false);\n      setDisabledComponents(true);\n    } else {\n      setStateRadioDhcp(false);\n      setStateRadioStatic(true);\n      setDisabledComponents(false);\n    }\n\n    setRadioSelected(event.target.id);\n    console.log(radioSelected);\n  }\n\n  function ButtonPing_Click() {\n    console.log(\"clicked in Ping\");\n    api.getNetworkPing(function (res) {\n      console.log(`Respuesta del ping ${JSON.stringify(res)}`);\n\n      if (res.result === \"ok\") {\n        setResponseString(`Ping Response Success`);\n        setIsValid(true);\n        setTimeout(() => {\n          setIsValid(false);\n        }, 3000);\n      } else {\n        setResponseString(`Ping Response Error`);\n        setIsError(true);\n        setTimeout(() => {\n          setIsError(false);\n        }, 3000);\n      }\n    });\n  }\n\n  function ButtonGetNetworkConfig_Click() {\n    console.log(\"clicked in get config\");\n    api.getNetworkConfig(function (res) {\n      console.log(res);\n\n      if (res.result === \"ok\") {\n        if (res.message.config.ipv4.method === \"dhcp\") {\n          setRadioSelected(\"radiodhcp\");\n          form.address = \"\";\n          form.gateway = \"\";\n          form.dnsprimary = \"\";\n          form.dnssecondary = \"\";\n          setStateRadioDhcp(true);\n          setStateRadioStatic(false);\n          setDisabledComponents(true);\n        } else //is static\n          {\n            setRadioSelected(\"radiostatic\");\n            setStateRadioDhcp(false);\n            setStateRadioStatic(true);\n            setDisabledComponents(false);\n            var addressIp = \"\";\n\n            switch (res.message.config.ipv4.prefix_length) {\n              case 8:\n                addressIp = \"255.0.0.0\";\n                break;\n\n              case 16:\n                addressIp = \"255.255.0.0\";\n                break;\n\n              default:\n                addressIp = \"255.255.255.0\";\n            }\n\n            form.address = parseIP(res.message.config.ipv4.address);\n            form.gateway = parseIP(res.message.config.ipv4.gateway);\n            form.netmask = addressIp;\n\n            if (res.message.config.ipv4.name_servers.length === 0) {\n              form.dnsprimary = \"\";\n              form.dnssecondary = \"\";\n            }\n\n            if (res.message.config.ipv4.name_servers.length === 1) {\n              form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0]);\n              form.dnssecondary = \"\";\n            }\n\n            if (res.message.config.ipv4.name_servers.length === 2) {\n              form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0]);\n              form.dnssecondary = parseIP(res.message.config.ipv4.name_servers[1]);\n            }\n          }\n\n        setResponseString(`Get Config Success`);\n        setErrors({\n          address: \"\",\n          gateway: \"\",\n          netmask: \"\",\n          dnsprimary: \"\",\n          dnssecondary: \"\"\n        });\n        setIsValid(true);\n        setTimeout(() => {\n          setIsValid(false);\n        }, 3000);\n      } else {\n        //is error in the response\n        setResponseString(`Get Config Error`);\n        setErrors({\n          address: \"\",\n          gateway: \"\",\n          netmask: \"\",\n          dnsprimary: \"\",\n          dnssecondary: \"\"\n        });\n        setIsError(true);\n        setTimeout(() => {\n          setIsError(false);\n        }, 3000);\n      }\n    });\n  }\n\n  const setField = (field, value) => {\n    setForm({ ...form,\n      [field]: value\n    }); // Check and see if errors exist, and remove them from the error object:\n\n    if (!!errors[field]) setErrors({ ...errors,\n      [field]: null\n    });\n  };\n\n  const ButtonSetNetworkConfig_Click = event => {\n    event.preventDefault(); //the config is static\n\n    if (radioSelected === \"radiostatic\") {\n      // get our new errors\n      const newErrors = findFormErrors(); // Conditional logic:\n\n      if (Object.keys(newErrors).length > 0) {\n        // We got errors!\n        setErrors(newErrors);\n      } else {\n        // No errors! Put any logic here for the form submission!\n        console.log(`\n          address: ${form.address}\n          gateway: ${form.gateway}\n          netmask: ${form.netmask}\n          server primary: ${form.dnsprimary}\n          server secondary: ${form.dnssecondary}\n        `);\n        var maskNodes = form.netmask.match(/(\\d+)/g);\n        var cidr = 0;\n\n        for (var i in maskNodes) {\n          cidr += ((maskNodes[i] >>> 0).toString(2).match(/1/g) || []).length;\n        }\n\n        var config = \"\";\n        var dnsserver = [];\n\n        if (!form.dnsprimary && !form.dnssecondary) {\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": []\n          };\n        }\n\n        if (form.dnsprimary && !form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`);\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`]\n          };\n        }\n\n        if (!form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(\"\");\n          dnsserver.push(`${form.dnssecondary}`);\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          };\n        }\n\n        if (form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`);\n          dnsserver.push(`${form.dnssecondary}`);\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          };\n        }\n\n        console.log(JSON.stringify(config));\n        let result = Validation.validateNetConfig(config);\n\n        if (result.count > 0) {\n          let error = `${Object.keys(result.errors)[0]}`;\n\n          switch (error) {\n            case \"adddress\":\n              setErrors({\n                address: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"gateway\":\n              setErrors({\n                gateway: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"netmask\":\n              setErrors({\n                netmask: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"dnsprimary\":\n              setErrors({\n                dnsprimary: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"dnssecondary\":\n              setErrors({\n                dnssecondary: Object.values(result.errors)[0]\n              });\n              break;\n\n            default:\n              break;\n          }\n        } else {\n          api.setNetworkConfigStatic(result.input, function (res) {\n            if (res.result === \"ok\") {\n              setResponseString(`Set Static Config Succes`);\n              setIsValid(true);\n              setTimeout(() => {\n                setIsValid(false);\n              }, 3000);\n            } else {\n              setResponseString(`Set Static Config Error`);\n              setIsError(true);\n              setTimeout(() => {\n                setIsError(false);\n              }, 3000);\n            }\n          });\n        }\n      }\n    } else {\n      console.log(radioSelected);\n      const config = {\n        \"method\": \"dhcp\"\n      };\n      let result = Validation.validateNetConfig(config);\n\n      if (result.count > 0) {\n        setResponseString(`Error in config`);\n        setIsError(true);\n        setTimeout(() => {\n          setIsError(false);\n        }, 3000);\n      } else {\n        api.setNetworkConfigDhcp(result.input, function (res) {\n          console.log(res);\n\n          if (res.result === \"ok\") {\n            setResponseString(`Set DHCP Config Succes`);\n            setIsValid(true);\n            setTimeout(() => {\n              setIsValid(false);\n            }, 3000);\n          } else {\n            setResponseString(`Set DHCP Config Error`);\n            setIsError(true);\n            setTimeout(() => {\n              setIsError(false);\n            }, 3000);\n          }\n        });\n      }\n    }\n  };\n\n  const findFormErrors = () => {\n    const {\n      address,\n      gateway,\n      netmask,\n      dnsprimary,\n      dnssecondary\n    } = form;\n    const newErrors = {}; // name errors\n\n    if (!address || !validateIPaddress(address)) newErrors.address = 'IP has invalid format';\n    if (address === '') newErrors.address = 'This field is required';\n    if (!gateway || gateway === '' || !validateIPaddress(gateway)) newErrors.gateway = 'IP has invalid format';\n    if (!netmask || netmask === '' || !validateIPaddress(netmask)) newErrors.netmask = 'IP has invalid format';\n\n    if (dnsprimary) {\n      if (!dnsprimary || !validateIPaddress(dnsprimary)) newErrors.dnsprimary = 'IP has invalid format';\n    }\n\n    if (dnssecondary) {\n      if (!dnssecondary || !validateIPaddress(dnssecondary)) newErrors.dnssecondary = 'IP has invalid format';\n    }\n\n    return newErrors;\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }\n  }, \"NETWORK\"), /*#__PURE__*/React.createElement(Alert, {\n    show: isValid,\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }\n  }, responseString), /*#__PURE__*/React.createElement(Alert, {\n    show: isError,\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }\n  }, responseString), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    as: \"legend\",\n    column: true,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    sm: 3,\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"radio\",\n    label: \"Obtain an IP address automatically\",\n    id: \"radiodhcp\",\n    onChange: ButtonSelectRadio_Click,\n    checked: stateRadioDhcp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"radio\",\n    label: \"Use the following IP address:\",\n    id: \"radiostatic\",\n    onChange: ButtonSelectRadio_Click,\n    checked: stateRadioStatic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }\n  }, \"IP Address\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"IP Address\",\n    onChange: e => setField('address', e.target.value),\n    isInvalid: !!errors.address,\n    disabled: ipAddressDisabled,\n    value: form.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 11\n    }\n  }, errors.address))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }\n  }, \"Select Netmask\"), /*#__PURE__*/React.createElement(Col, {\n    xs: 2,\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    //</Col>className=\"form-control-custom\" //makes gray the control\n    as: \"select\",\n    bsPrefix: \"form-select\" //shows the control like a combobox\n    ,\n    onChange: e => setField('netmask', e.target.value),\n    isInvalid: !!errors.netmask,\n    disabled: netmaskDisabled,\n    value: form.netmask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.255.255.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }\n  }, \"255.255.255.0\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.255.0.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 13\n    }\n  }, \"255.255.0.0\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.0.0.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }, \"255.0.0.0\")), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 11\n    }\n  }, errors.netmask))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }\n  }, \"Default Gateway\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Gateway\",\n    onChange: e => setField('gateway', e.target.value),\n    isInvalid: !!errors.gateway,\n    disabled: gatewayDisabled,\n    value: form.gateway,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 11\n    }\n  }, errors.gateway))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 9\n    }\n  }, \"Set DNS Servers:\")), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }\n  }, \"Primary\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Primary DNS\",\n    onChange: e => setField('dnsprimary', e.target.value),\n    isInvalid: !!errors.dnsprimary,\n    disabled: dnsPrimaryDisabled,\n    value: form.dnsprimary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, errors.dnsprimary))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 9\n    }\n  }, \"Secondary\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Secondary DNS\",\n    onChange: e => setField('dnssecondary', e.target.value),\n    isInvalid: !!errors.dnssecondary,\n    disabled: dnsSecondaryDisabled,\n    value: form.dnssecondary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 11\n    }\n  }, errors.dnssecondary))), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: {\n      span: 10,\n      offset: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    direction: \"horizontal\",\n    gap: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: ButtonGetNetworkConfig_Click,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }\n  }, \"Get Config\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: ButtonSetNetworkConfig_Click,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }\n  }, \"Set Config\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: ButtonPing_Click,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 13\n    }\n  }, \"Ping\")))));\n}\n\nexport default Network;","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/Network.js"],"names":["useState","api","React","Validation","Col","Row","Form","Alert","Stack","Button","Network","radioSelected","setRadioSelected","stateRadioDhcp","setStateRadioDhcp","stateRadioStatic","setStateRadioStatic","form","setForm","address","gateway","netmask","dnsprimary","dnssecondary","errors","setErrors","ipAddressDisabled","setIpAddressdDisabled","gatewayDisabled","setGatewayDisabled","netmaskDisabled","setNetmaskDisabled","dnsPrimaryDisabled","setDnsPrimaryDisabled","dnsSecondaryDisabled","setDnsSecondaryDisabled","responseString","setResponseString","isValid","setIsValid","isError","setIsError","validateIPaddress","ipaddress","test","setDisabledComponents","state","parseIP","key","addresswithpoints","JSON","stringify","replace","ButtonSelectRadio_Click","event","target","id","console","log","ButtonPing_Click","getNetworkPing","res","result","setTimeout","ButtonGetNetworkConfig_Click","getNetworkConfig","message","config","ipv4","method","addressIp","prefix_length","name_servers","length","setField","field","value","ButtonSetNetworkConfig_Click","preventDefault","newErrors","findFormErrors","Object","keys","maskNodes","match","cidr","i","toString","dnsserver","push","validateNetConfig","count","error","values","setNetworkConfigStatic","input","setNetworkConfigDhcp","e","span","offset"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport './App.css';\nimport api from \"./api\"\nimport React from \"react\"\nimport Validation from './Validation'\n\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Form from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\nimport Stack from 'react-bootstrap/Stack'\nimport Button from 'react-bootstrap/Button'\n\nfunction Network() {\n  //radio selector\n  const [radioSelected, setRadioSelected] = React.useState(\"radiodhcp\")\n  const [stateRadioDhcp, setStateRadioDhcp] = React.useState(true)\n  const [stateRadioStatic, setStateRadioStatic] = React.useState(false)\n\n  //Errors\n  const [form, setForm] = useState({ address: \"\", gateway: \"\", netmask: \"255.255.255.0\", dnsprimary: \"\", dnssecondary: \"\" })\n  const [errors, setErrors] = useState({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n\n  //disable componets\n  const [ipAddressDisabled, setIpAddressdDisabled] = React.useState(true);\n  const [gatewayDisabled, setGatewayDisabled] = React.useState(true);\n  const [netmaskDisabled, setNetmaskDisabled] = React.useState(true);\n  const [dnsPrimaryDisabled, setDnsPrimaryDisabled] = React.useState(true);\n  const [dnsSecondaryDisabled, setDnsSecondaryDisabled] = React.useState(true);\n\n  //Response from yeico appliance\n  const [responseString, setResponseString] = React.useState(\"\")\n\n  //Alerts\n  const [isValid, setIsValid] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  function validateIPaddress(ipaddress) {\n    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {\n      return (true)\n    }\n    return (false)\n  }\n\n  function setDisabledComponents(state) {\n    setIpAddressdDisabled(state)\n    setGatewayDisabled(state)\n    setNetmaskDisabled(state)\n    setDnsPrimaryDisabled(state)\n    setDnsSecondaryDisabled(state)\n  }\n\n  function parseIP(key) {\n    var addresswithpoints = `${JSON.stringify(key)}`.replace(/,/g, \".\")\n    return addresswithpoints.replace(/[[\\]']/g, \"\")\n  }\n\n  //manage state radios\n  function ButtonSelectRadio_Click(event) {\n    if (event.target.id === \"radiodhcp\") {\n      setStateRadioDhcp(true)\n      setStateRadioStatic(false)\n      setDisabledComponents(true)\n    }\n    else {\n      setStateRadioDhcp(false)\n      setStateRadioStatic(true)\n      setDisabledComponents(false)\n    }\n    setRadioSelected(event.target.id)\n    console.log(radioSelected)\n  }\n\n  function ButtonPing_Click() {\n    console.log(\"clicked in Ping\")\n    api.getNetworkPing(function (res) {\n      console.log(`Respuesta del ping ${JSON.stringify(res)}`)\n      if (res.result === \"ok\") {\n        setResponseString(`Ping Response Success`)\n        setIsValid(true)\n        setTimeout(() => {\n          setIsValid(false)\n        }, 3000);\n      }\n      else {\n        setResponseString(`Ping Response Error`)\n        setIsError(true)\n        setTimeout(() => {\n          setIsError(false)\n        }, 3000);\n      }\n    })\n  }\n\n  function ButtonGetNetworkConfig_Click() {\n    console.log(\"clicked in get config\");\n    api.getNetworkConfig(function (res) {\n      console.log(res)\n      if (res.result === \"ok\") {\n        if (res.message.config.ipv4.method === \"dhcp\") {\n          setRadioSelected(\"radiodhcp\");\n          form.address = \"\"\n          form.gateway = \"\"\n          form.dnsprimary = \"\"\n          form.dnssecondary = \"\"\n          setStateRadioDhcp(true)\n          setStateRadioStatic(false)\n          setDisabledComponents(true)\n        }\n        else //is static\n        {\n          setRadioSelected(\"radiostatic\");\n          setStateRadioDhcp(false)\n          setStateRadioStatic(true)\n          setDisabledComponents(false)\n\n          var addressIp = \"\";\n          switch (res.message.config.ipv4.prefix_length) {\n            case 8:\n              addressIp = \"255.0.0.0\"\n              break;\n            case 16:\n              addressIp = \"255.255.0.0\"\n              break;\n            default:\n              addressIp = \"255.255.255.0\"\n          }\n          form.address = parseIP(res.message.config.ipv4.address)\n          form.gateway = parseIP(res.message.config.ipv4.gateway)\n          form.netmask = addressIp\n          if (res.message.config.ipv4.name_servers.length === 0) {\n            form.dnsprimary = \"\"\n            form.dnssecondary = \"\"\n          }\n          if (res.message.config.ipv4.name_servers.length === 1) {\n            form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n            form.dnssecondary = \"\"\n          }\n          if (res.message.config.ipv4.name_servers.length === 2) {\n            form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n            form.dnssecondary = parseIP(res.message.config.ipv4.name_servers[1])\n          }\n        }\n        setResponseString(`Get Config Success`)\n        setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n        setIsValid(true)\n        setTimeout(() => {\n          setIsValid(false)\n        }, 3000);\n      }\n      else { //is error in the response\n        setResponseString(`Get Config Error`)\n        setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n        setIsError(true)\n        setTimeout(() => {\n          setIsError(false)\n        }, 3000);\n      }\n    })\n  }\n\n  const setField = (field, value) => {\n    setForm({\n      ...form,\n      [field]: value\n    })\n    // Check and see if errors exist, and remove them from the error object:\n    if (!!errors[field]) setErrors({\n      ...errors,\n      [field]: null\n    })\n  }\n\n  const ButtonSetNetworkConfig_Click = (event) => {\n    event.preventDefault()\n    //the config is static\n    if (radioSelected === \"radiostatic\") {\n      // get our new errors\n      const newErrors = findFormErrors()\n      // Conditional logic:\n      if (Object.keys(newErrors).length > 0) {\n        // We got errors!\n        setErrors(newErrors)\n      }\n      else {\n        // No errors! Put any logic here for the form submission!\n        console.log(`\n          address: ${form.address}\n          gateway: ${form.gateway}\n          netmask: ${form.netmask}\n          server primary: ${form.dnsprimary}\n          server secondary: ${form.dnssecondary}\n        `)\n        var maskNodes = form.netmask.match(/(\\d+)/g);\n        var cidr = 0;\n        for (var i in maskNodes) {\n          cidr += (((maskNodes[i] >>> 0).toString(2)).match(/1/g) || []).length;\n        }\n\n        var config = \"\"\n        var dnsserver = []\n        if (!form.dnsprimary && !form.dnssecondary) {\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": []\n          }\n        }\n        if (form.dnsprimary && !form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`)\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`]\n          }\n        }\n        if (!form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(\"\")\n          dnsserver.push(`${form.dnssecondary}`)\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          }\n        }\n        if (form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`)\n          dnsserver.push(`${form.dnssecondary}`)\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          }\n        }\n        console.log(JSON.stringify(config))\n        let result = Validation.validateNetConfig(config)\n        if (result.count > 0) {\n          let error = `${Object.keys(result.errors)[0]}`\n          switch (error) {\n            case \"adddress\":\n              setErrors({ address: Object.values(result.errors)[0] })\n              break\n            case \"gateway\":\n              setErrors({ gateway: Object.values(result.errors)[0] })\n              break\n            case \"netmask\":\n              setErrors({ netmask: Object.values(result.errors)[0] })\n              break\n            case \"dnsprimary\":\n              setErrors({ dnsprimary: Object.values(result.errors)[0] })\n              break\n            case \"dnssecondary\":\n              setErrors({ dnssecondary: Object.values(result.errors)[0] })\n              break\n            default:\n              break\n          }\n        }\n        else {\n          api.setNetworkConfigStatic(result.input, function (res) {\n            if (res.result === \"ok\") {\n              setResponseString(`Set Static Config Succes`)\n              setIsValid(true)\n              setTimeout(() => {\n                setIsValid(false)\n              }, 3000);\n            }\n            else {\n              setResponseString(`Set Static Config Error`)\n              setIsError(true)\n              setTimeout(() => {\n                setIsError(false)\n              }, 3000);\n            }\n          });\n        }\n      }\n    }\n    else {\n      console.log(radioSelected)\n      const config = {\n        \"method\": \"dhcp\"\n      }\n      let result = Validation.validateNetConfig(config)\n      if (result.count > 0) {\n        setResponseString(`Error in config`)\n        setIsError(true)\n        setTimeout(() => {\n          setIsError(false)\n        }, 3000);\n      }\n      else {\n        api.setNetworkConfigDhcp(result.input, function (res) {\n          console.log(res)\n          if (res.result === \"ok\") {\n            setResponseString(`Set DHCP Config Succes`)\n            setIsValid(true)\n            setTimeout(() => {\n              setIsValid(false)\n            }, 3000);\n          }\n          else {\n            setResponseString(`Set DHCP Config Error`)\n            setIsError(true)\n            setTimeout(() => {\n              setIsError(false)\n            }, 3000);\n          }\n        });\n      }\n    }\n  }\n\n  const findFormErrors = () => {\n    const { address, gateway, netmask, dnsprimary, dnssecondary } = form\n    const newErrors = {}\n    // name errors\n    if (!address || !validateIPaddress(address)) newErrors.address = 'IP has invalid format'\n    if (address === '') newErrors.address = 'This field is required'\n    if (!gateway || gateway === '' || !validateIPaddress(gateway)) newErrors.gateway = 'IP has invalid format'\n    if (!netmask || netmask === '' || !validateIPaddress(netmask)) newErrors.netmask = 'IP has invalid format'\n    if (dnsprimary) {\n      if (!dnsprimary || !validateIPaddress(dnsprimary)) newErrors.dnsprimary = 'IP has invalid format'\n    }\n    if (dnssecondary) {\n      if (!dnssecondary || !validateIPaddress(dnssecondary)) newErrors.dnssecondary = 'IP has invalid format'\n    }\n    return newErrors\n  }\n\n  return (\n    <Form>\n      <h1>NETWORK</h1>\n      <Alert show={isValid} variant=\"success\">\n        {responseString}\n      </Alert>\n      <Alert show={isError} variant=\"danger\">\n        {responseString}\n      </Alert>\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label as=\"legend\" column sm={2}>\n        </Form.Label>\n        <Col sm={3} align=\"left\">\n          <Form.Check\n            type=\"radio\"\n            label=\"Obtain an IP address automatically\"\n            id=\"radiodhcp\"\n            onChange={ButtonSelectRadio_Click}\n            checked={stateRadioDhcp}\n          />\n          <Form.Check\n            type=\"radio\"\n            label=\"Use the following IP address:\"\n            id=\"radiostatic\"\n            onChange={ButtonSelectRadio_Click}\n            checked={stateRadioStatic}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-2\">\n        <Form.Label align=\"right\" column sm={2}>\n          IP Address\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"IP Address\"\n            onChange={e => setField('address', e.target.value)}\n            isInvalid={!!errors.address}\n            disabled={ipAddressDisabled}\n            value={form.address}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.address}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Select Netmask\n        </Form.Label>\n        <Col xs={2} align=\"left\">\n          <Form.Control\n            //</Col>className=\"form-control-custom\" //makes gray the control\n            as=\"select\"\n            bsPrefix={\"form-select\"} //shows the control like a combobox\n            onChange={e => setField('netmask', e.target.value)}\n            isInvalid={!!errors.netmask}\n            disabled={netmaskDisabled}\n            value={form.netmask}\n          >\n            <option value=\"255.255.255.0\">255.255.255.0</option>\n            <option value=\"255.255.0.0\">255.255.0.0</option>\n            <option value=\"255.0.0.0\">255.0.0.0</option>\n          </Form.Control>\n          <Form.Control.Feedback type='invalid'>{errors.netmask}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Default Gateway\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"Gateway\"\n            onChange={e => setField('gateway', e.target.value)}\n            isInvalid={!!errors.gateway}\n            disabled={gatewayDisabled}\n            value={form.gateway}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.gateway}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Set DNS Servers:\n        </Form.Label>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Primary\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"Primary DNS\"\n            onChange={e => setField('dnsprimary', e.target.value)}\n            isInvalid={!!errors.dnsprimary}\n            disabled={dnsPrimaryDisabled}\n            value={form.dnsprimary}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.dnsprimary}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Secondary\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"Secondary DNS\"\n            onChange={e => setField('dnssecondary', e.target.value)}\n            isInvalid={!!errors.dnssecondary}\n            disabled={dnsSecondaryDisabled}\n            value={form.dnssecondary}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.dnssecondary}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group>\n        <Col sm={{ span: 10, offset: 2 }}>\n          <Stack direction=\"horizontal\" gap={3}>\n            <Button onClick={ButtonGetNetworkConfig_Click}>Get Config</Button>\n            <Button onClick={ButtonSetNetworkConfig_Click}>Set Config</Button>\n            <Button onClick={ButtonPing_Click}>Ping</Button>\n          </Stack>\n        </Col>\n      </Form.Group>\n    </Form>\n  )\n}\n\nexport default Network;"]},"metadata":{},"sourceType":"module"}