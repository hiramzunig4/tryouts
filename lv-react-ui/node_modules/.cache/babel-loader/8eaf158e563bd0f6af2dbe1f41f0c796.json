{"ast":null,"code":"function setNetworkConfigDhcp(config, cb) {\n  fetch(\"/net/setup/eth0\", {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction setNetworkConfigStatic(ip, config, cb) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkConfig(cb, ip) {\n  fetch(`http://${ip}:31680/net/state/eth0`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkPing(cb, ip) {\n  fetch(`http://${ip}:31680/ping`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkDiscover(cb) {\n  fetch(\"discovery/2\").then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction blinkNetworkDevice(cb, ip) {\n  fetch(`blink/${ip}`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nconst exports = {\n  setNetworkConfigDhcp,\n  getNetworkConfig,\n  getNetworkPing,\n  setNetworkConfigStatic,\n  getNetworkDiscover,\n  blinkNetworkDevice\n};\nexport default exports;","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/api.js"],"names":["setNetworkConfigDhcp","config","cb","fetch","method","body","JSON","stringify","headers","then","res","json","catch","err","setNetworkConfigStatic","ip","getNetworkConfig","getNetworkPing","getNetworkDiscover","blinkNetworkDevice","exports"],"mappings":"AAAA,SAASA,oBAAT,CAA8BC,MAA9B,EAAsCC,EAAtC,EAA0C;AACxCC,EAAAA,KAAK,CAAC,iBAAD,EAAoB;AACvBC,IAAAA,MAAM,EAAE,MADe;AAEvBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAFiB;AAGvBO,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHc,GAApB,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALf,EAMGF,IANH,CAMQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CANlB,EAOGC,KAPH,CAOSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAPlB;AAQD;;AAED,SAASC,sBAAT,CAAgCC,EAAhC,EAAoCd,MAApC,EAA4CC,EAA5C,EAAgD;AAC9CC,EAAAA,KAAK,CAAE,UAASY,EAAG,uBAAd,EAAsC;AACzCX,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAFmC;AAGzCO,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHgC,GAAtC,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALf,EAMGF,IANH,CAMQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CANlB,EAOGC,KAPH,CAOSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAPlB;AAQD;;AAED,SAASG,gBAAT,CAA0Bd,EAA1B,EAA8Ba,EAA9B,EAAkC;AAChCZ,EAAAA,KAAK,CAAE,UAASY,EAAG,uBAAd,CAAL,CACGN,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAED,SAASI,cAAT,CAAwBf,EAAxB,EAA4Ba,EAA5B,EAAgC;AAC9BZ,EAAAA,KAAK,CAAE,UAASY,EAAG,aAAd,CAAL,CACGN,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAGD,SAASK,kBAAT,CAA4BhB,EAA5B,EAAgC;AAC9BC,EAAAA,KAAK,CAAC,aAAD,CAAL,CACGM,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAED,SAASM,kBAAT,CAA4BjB,EAA5B,EAAgCa,EAAhC,EAAoC;AAClCZ,EAAAA,KAAK,CAAE,SAAQY,EAAG,EAAb,CAAL,CACGN,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAED,MAAMO,OAAO,GAAG;AACdpB,EAAAA,oBADc;AAEdgB,EAAAA,gBAFc;AAGdC,EAAAA,cAHc;AAIdH,EAAAA,sBAJc;AAKdI,EAAAA,kBALc;AAMdC,EAAAA;AANc,CAAhB;AASA,eAAeC,OAAf","sourcesContent":["function setNetworkConfigDhcp(config, cb) {\n  fetch(\"/net/setup/eth0\", {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction setNetworkConfigStatic(ip, config, cb) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkConfig(cb, ip) {\n  fetch(`http://${ip}:31680/net/state/eth0`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkPing(cb, ip) {\n  fetch(`http://${ip}:31680/ping`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\n\nfunction getNetworkDiscover(cb) {\n  fetch(\"discovery/2\")\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction blinkNetworkDevice(cb, ip) {\n  fetch(`blink/${ip}`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nconst exports = {\n  setNetworkConfigDhcp,\n  getNetworkConfig,\n  getNetworkPing,\n  setNetworkConfigStatic,\n  getNetworkDiscover,\n  blinkNetworkDevice,\n}\n\nexport default exports"]},"metadata":{},"sourceType":"module"}