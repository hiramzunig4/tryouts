{"ast":null,"code":"import { Netmask } from 'netmask'; //https://stackoverflow.com/questions/503052/javascript-is-ip-in-one-of-these-subnets\n\nimport ValidationIp from './ValidationIp';\n\nconst addToError = function (result, name, message) {\n  result.errors[name] = message;\n  result.count++;\n};\n\nconst validateIpStructure = function (result, ip, name) {\n  ip = ip || \"\";\n  let error = ValidationIp.validateIp(ip);\n\n  if (error) {\n    addToError(result, name, error);\n  }\n};\n\nconst checkPrefixLength = function (result, prefixLength, name) {\n  if (!Number.isInteger(prefixLength)) {\n    addToError(result, name, \"Prefix length should be a number\");\n    return;\n  }\n\n  if ([8, 16, 24].indexOf(prefixLength) < 0) {\n    addToError(result, name, \"Invalida prefix length\");\n    return;\n  }\n};\n\nconst checkNameServersLength = function (result, length, name) {\n  if ([0, 1, 2].indexOf(length) < 0) {\n    addToError(result, name, \"Invalid name servers length\");\n    return;\n  }\n};\n\nconst checkGatewayIsinNetmask = function (result, gateway, ipNetmask, name) {\n  const block = new Netmask(ipNetmask);\n  const ip = gateway;\n\n  if (!block.contains(ip)) {\n    addToError(result, name, \"Invalid gateway segment\");\n    return;\n  }\n};\n\nconst validateNetConfig = function (input) {\n  const result = {\n    count: 0,\n    errors: {},\n    input\n  };\n\n  switch (input.method) {\n    case \"dhcp\":\n      break;\n\n    case \"static\":\n      validateIpStructure(result, input.address, \"address\");\n      checkPrefixLength(result, input.prefix_length, \"prefix_length\");\n      validateIpStructure(result, input.gateway, \"gateway\");\n\n      if (result.count === 0) {\n        checkGatewayIsinNetmask(result, input.gateway, `${input.address}/${input.prefix_length}`, \"gateway\");\n      }\n\n      checkNameServersLength(result, input.name_servers.length, \"nameservers_length\");\n\n      if (input.name_servers.length > 0) {\n        validateIpStructure(result, input.name_servers[0], \"dnsprimary\");\n      }\n\n      if (input.name_servers.length > 1) {\n        validateIpStructure(result, input.name_servers[1], \"dnssecondary\");\n      }\n\n      break;\n\n    default:\n      addToError(result, \"method\", \"invalid method\");\n      break;\n  }\n\n  return result;\n};\n\nconst exports = {\n  validateIpStructure,\n  validateNetConfig\n};\nexport default exports;","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/Validation.js"],"names":["Netmask","ValidationIp","addToError","result","name","message","errors","count","validateIpStructure","ip","error","validateIp","checkPrefixLength","prefixLength","Number","isInteger","indexOf","checkNameServersLength","length","checkGatewayIsinNetmask","gateway","ipNetmask","block","contains","validateNetConfig","input","method","address","prefix_length","name_servers","exports"],"mappings":"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","sourcesContent":["import { Netmask } from 'netmask' //https://stackoverflow.com/questions/503052/javascript-is-ip-in-one-of-these-subnets\nimport ValidationIp from './ValidationIp'\n\nconst addToError = function (result, name, message) {\n    result.errors[name] = message\n    result.count++\n}\n\nconst validateIpStructure = function (result, ip, name) {\n    ip = ip || \"\"\n    let error = ValidationIp.validateIp(ip)\n    if (error) {\n        addToError(result, name, error)\n    }\n}\n\nconst checkPrefixLength = function (result, prefixLength, name) {\n    if (!Number.isInteger(prefixLength)) {\n        addToError(result, name, \"Prefix length should be a number\")\n        return\n    }\n    if ([8, 16, 24].indexOf(prefixLength) < 0) {\n        addToError(result, name, \"Invalida prefix length\")\n        return\n    }\n}\n\nconst checkNameServersLength = function (result, length, name) {\n    if ([0, 1, 2].indexOf(length) < 0) {\n        addToError(result, name, \"Invalid name servers length\")\n        return\n    }\n}\n\nconst checkGatewayIsinNetmask = function (result, gateway, ipNetmask, name) {\n    const block = new Netmask(ipNetmask)\n    const ip = gateway\n    if (!block.contains(ip)) {\n        addToError(result, name, \"Invalid gateway segment\")\n        return\n    }\n}\n\nconst validateNetConfig = function (input) {\n    const result = { count: 0, errors: {}, input }\n    switch (input.method) {\n        case \"dhcp\":\n            break\n        case \"static\":\n            validateIpStructure(result, input.address, \"address\")\n            checkPrefixLength(result, input.prefix_length, \"prefix_length\")\n            validateIpStructure(result, input.gateway, \"gateway\")\n            if (result.count === 0) {\n                checkGatewayIsinNetmask(result, input.gateway, `${input.address}/${input.prefix_length}`, \"gateway\")\n            }\n            checkNameServersLength(result, input.name_servers.length, \"nameservers_length\")\n            if (input.name_servers.length > 0) {\n                validateIpStructure(result, input.name_servers[0], \"dnsprimary\")\n            }\n            if (input.name_servers.length > 1) {\n                validateIpStructure(result, input.name_servers[1], \"dnssecondary\")\n            }\n            break\n        default:\n            addToError(result, \"method\", \"invalid method\")\n            break\n    }\n    return result\n}\n\nconst exports = {\n    validateIpStructure,\n    validateNetConfig,\n}\n\nexport default exports"]},"metadata":{},"sourceType":"module"}