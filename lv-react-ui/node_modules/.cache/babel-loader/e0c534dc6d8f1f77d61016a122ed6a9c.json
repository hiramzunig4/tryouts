{"ast":null,"code":"function setNetworkConfigDhcp(ip, config, cb) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction setNetworkConfigStatic(ip, config, cb) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkConfig(cb, ip) {\n  fetch(`http://${ip}:31680/net/state/eth0`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkPing(cb, ip) {\n  fetch(`http://${ip}:31680/ping`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkDiscover(cb) {\n  fetch(\"discovery/2\").then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction blinkNetworkDevice(cb, ip) {\n  fetch(`blink/${ip}`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nconst exports = {\n  setNetworkConfigDhcp,\n  getNetworkConfig,\n  getNetworkPing,\n  setNetworkConfigStatic,\n  getNetworkDiscover,\n  blinkNetworkDevice\n};\nexport default exports;","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/api.js"],"names":["setNetworkConfigDhcp","ip","config","cb","fetch","method","body","JSON","stringify","headers","then","res","json","catch","err","setNetworkConfigStatic","getNetworkConfig","getNetworkPing","getNetworkDiscover","blinkNetworkDevice","exports"],"mappings":"AAAA,SAASA,oBAAT,CAA8BC,EAA9B,EAAkCC,MAAlC,EAA0CC,EAA1C,EAA8C;AAC5CC,EAAAA,KAAK,CAAE,UAASH,EAAG,uBAAd,EAAsC;AACzCI,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAFmC;AAGzCO,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHgC,GAAtC,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALf,EAMGF,IANH,CAMQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CANlB,EAOGC,KAPH,CAOSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAPlB;AAQD;;AAED,SAASC,sBAAT,CAAgCd,EAAhC,EAAoCC,MAApC,EAA4CC,EAA5C,EAAgD;AAC9CC,EAAAA,KAAK,CAAE,UAASH,EAAG,uBAAd,EAAsC;AACzCI,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAFmC;AAGzCO,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHgC,GAAtC,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALf,EAMGF,IANH,CAMQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CANlB,EAOGC,KAPH,CAOSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAPlB;AAQD;;AAED,SAASE,gBAAT,CAA0Bb,EAA1B,EAA8BF,EAA9B,EAAkC;AAChCG,EAAAA,KAAK,CAAE,UAASH,EAAG,uBAAd,CAAL,CACGS,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAED,SAASG,cAAT,CAAwBd,EAAxB,EAA4BF,EAA5B,EAAgC;AAC9BG,EAAAA,KAAK,CAAE,UAASH,EAAG,aAAd,CAAL,CACGS,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAGD,SAASI,kBAAT,CAA4Bf,EAA5B,EAAgC;AAC9BC,EAAAA,KAAK,CAAC,aAAD,CAAL,CACGM,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAED,SAASK,kBAAT,CAA4BhB,EAA5B,EAAgCF,EAAhC,EAAoC;AAClCG,EAAAA,KAAK,CAAE,SAAQH,EAAG,EAAb,CAAL,CACGS,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAIT,EAAE,CAACS,IAAD,CAFlB,EAGGC,KAHH,CAGSC,GAAG,IAAIX,EAAE,CAACW,GAAD,CAHlB;AAID;;AAED,MAAMM,OAAO,GAAG;AACdpB,EAAAA,oBADc;AAEdgB,EAAAA,gBAFc;AAGdC,EAAAA,cAHc;AAIdF,EAAAA,sBAJc;AAKdG,EAAAA,kBALc;AAMdC,EAAAA;AANc,CAAhB;AASA,eAAeC,OAAf","sourcesContent":["function setNetworkConfigDhcp(ip, config, cb) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction setNetworkConfigStatic(ip, config, cb) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkConfig(cb, ip) {\n  fetch(`http://${ip}:31680/net/state/eth0`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkPing(cb, ip) {\n  fetch(`http://${ip}:31680/ping`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\n\nfunction getNetworkDiscover(cb) {\n  fetch(\"discovery/2\")\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction blinkNetworkDevice(cb, ip) {\n  fetch(`blink/${ip}`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nconst exports = {\n  setNetworkConfigDhcp,\n  getNetworkConfig,\n  getNetworkPing,\n  setNetworkConfigStatic,\n  getNetworkDiscover,\n  blinkNetworkDevice,\n}\n\nexport default exports"]},"metadata":{},"sourceType":"module"}