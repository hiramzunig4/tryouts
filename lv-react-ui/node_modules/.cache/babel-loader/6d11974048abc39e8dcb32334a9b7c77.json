{"ast":null,"code":"var _jsxFileName = \"/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/Network.js\";\nimport React, { useState } from 'react';\nimport api from './api';\nimport Validation from './Validation';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport Modal from 'react-bootstrap/Modal';\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\n\nfunction Network(props) {\n  useEffect(() => {\n    if (getNetworkConfigOnload) {\n      console.log(\"es true\");\n    }\n  });\n  const [getNetworkConfigOnload, setGetNetworkConfigOnload] = React.useState(false); //radio selector\n\n  const [radioSelected, setRadioSelected] = React.useState(\"radiodhcp\");\n  const [stateRadioDhcp, setStateRadioDhcp] = React.useState(true);\n  const [stateRadioStatic, setStateRadioStatic] = React.useState(false); //disable componets\n\n  const [ipAddressDisabled, setIpAddressdDisabled] = React.useState(true);\n  const [gatewayDisabled, setGatewayDisabled] = React.useState(true);\n  const [netmaskDisabled, setNetmaskDisabled] = React.useState(true);\n  const [dnsPrimaryDisabled, setDnsPrimaryDisabled] = React.useState(true);\n  const [dnsSecondaryDisabled, setDnsSecondaryDisabled] = React.useState(true); //Errors\n\n  const [form, setForm] = useState({\n    address: \"\",\n    gateway: \"\",\n    netmask: \"255.255.255.0\",\n    dnsprimary: \"\",\n    dnssecondary: \"\"\n  });\n  const [errors, setErrors] = useState({\n    address: \"\",\n    gateway: \"\",\n    netmask: \"\",\n    dnsprimary: \"\",\n    dnssecondary: \"\"\n  }); //Response from yeico appliance\n\n  const [responseString, setResponseString] = React.useState(\"\"); //Alerts\n\n  const [isValid, setIsValid] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  function ButtonSelectRadio_Click(event) {\n    if (event.target.id === \"radiodhcp\") {\n      setStateRadioDhcp(true);\n      setStateRadioStatic(false);\n      setDisabledComponents(true);\n    } else {\n      setStateRadioDhcp(false);\n      setStateRadioStatic(true);\n      setDisabledComponents(false);\n    }\n\n    setRadioSelected(`${event.target.id}`);\n    console.log(radioSelected);\n  }\n\n  function setDisabledComponents(state) {\n    setIpAddressdDisabled(state);\n    setGatewayDisabled(state);\n    setNetmaskDisabled(state);\n    setDnsPrimaryDisabled(state);\n    setDnsSecondaryDisabled(state);\n  }\n\n  function parseIP(key) {\n    var addresswithpoints = `${JSON.stringify(key)}`.replace(/,/g, \".\");\n    return addresswithpoints.replace(/[[\\]']/g, \"\");\n  }\n\n  function validateIPaddress(ipaddress) {\n    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  const setField = (field, value) => {\n    setForm({ ...form,\n      [field]: value\n    }); // Check and see if errors exist, and remove them from the error object:\n\n    if (!!errors[field]) setErrors({ ...errors,\n      [field]: null\n    });\n  };\n\n  const findFormErrors = () => {\n    const {\n      address,\n      gateway,\n      netmask,\n      dnsprimary,\n      dnssecondary\n    } = form;\n    const newErrors = {}; // name errors\n\n    if (!address || !validateIPaddress(address)) newErrors.address = 'IP has invalid format';\n    if (address === '') newErrors.address = 'This field is required';\n    if (!gateway || gateway === '' || !validateIPaddress(gateway)) newErrors.gateway = 'IP has invalid format';\n    if (!netmask || netmask === '' || !validateIPaddress(netmask)) newErrors.netmask = 'IP has invalid format';\n\n    if (dnsprimary) {\n      if (!dnsprimary || !validateIPaddress(dnsprimary)) newErrors.dnsprimary = 'IP has invalid format';\n    }\n\n    if (dnssecondary) {\n      if (!dnssecondary || !validateIPaddress(dnssecondary)) newErrors.dnssecondary = 'IP has invalid format';\n    }\n\n    return newErrors;\n  };\n\n  function ButtonGetNetworkConfig_Click() {\n    console.log(\"clicked in get config\");\n    api.getNetworkConfig(function (res) {\n      console.log(res);\n\n      if (res.result === \"ok\") {\n        if (res.message.config.ipv4.method === \"dhcp\") {\n          setRadioSelected(\"radiodhcp\");\n          form.address = \"\";\n          form.gateway = \"\";\n          form.dnsprimary = \"\";\n          form.dnssecondary = \"\";\n          setStateRadioDhcp(true);\n          setStateRadioStatic(false);\n          setDisabledComponents(true);\n        } else //is static\n          {\n            setRadioSelected(\"radiostatic\");\n            setStateRadioDhcp(false);\n            setStateRadioStatic(true);\n            setDisabledComponents(false);\n            var addressIp = \"\";\n\n            switch (res.message.config.ipv4.prefix_length) {\n              case 8:\n                addressIp = \"255.0.0.0\";\n                break;\n\n              case 16:\n                addressIp = \"255.255.0.0\";\n                break;\n\n              default:\n                addressIp = \"255.255.255.0\";\n            }\n\n            form.address = parseIP(res.message.config.ipv4.address);\n            form.gateway = parseIP(res.message.config.ipv4.gateway);\n            form.netmask = addressIp;\n\n            if (res.message.config.ipv4.name_servers.length === 0) {\n              form.dnsprimary = \"\";\n              form.dnssecondary = \"\";\n            }\n\n            if (res.message.config.ipv4.name_servers.length === 1) {\n              form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0]);\n              form.dnssecondary = \"\";\n            }\n\n            if (res.message.config.ipv4.name_servers.length === 2) {\n              form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0]);\n              form.dnssecondary = parseIP(res.message.config.ipv4.name_servers[1]);\n            }\n          }\n\n        setResponseString(`Get Config Success`);\n        setErrors({\n          address: \"\",\n          gateway: \"\",\n          netmask: \"\",\n          dnsprimary: \"\",\n          dnssecondary: \"\"\n        });\n        setIsValid(true);\n        setTimeout(() => {\n          setIsValid(false);\n        }, 3000);\n      } else {\n        //is error in the response\n        setResponseString(`Get Config Error`);\n        setErrors({\n          address: \"\",\n          gateway: \"\",\n          netmask: \"\",\n          dnsprimary: \"\",\n          dnssecondary: \"\"\n        });\n        setIsError(true);\n        setTimeout(() => {\n          setIsError(false);\n        }, 3000);\n      }\n    }, props.device, \"nerves\", props.pass);\n  } //SetConfig\n\n\n  const ButtonSetNetworkConfig_Click = event => {\n    event.preventDefault(); //the config is static\n\n    console.log(`Esto es lo realmente seleccionado esta bieb? ${radioSelected}`);\n\n    if (radioSelected === \"radiostatic\") {\n      // get our new errors\n      const newErrors = findFormErrors(); // Conditional logic:\n\n      if (Object.keys(newErrors).length > 0) {\n        // We got errors!\n        setErrors(newErrors);\n      } else {\n        console.log(`\n              address: ${form.address}\n              gateway: ${form.gateway}\n              netmask: ${form.netmask}\n              server primary: ${form.dnsprimary}\n              server secondary: ${form.dnssecondary}\n            `);\n        var maskNodes = form.netmask.match(/(\\d+)/g);\n        var cidr = 0;\n\n        for (var i in maskNodes) {\n          cidr += ((maskNodes[i] >>> 0).toString(2).match(/1/g) || []).length;\n        }\n\n        var config = \"\";\n        var dnsserver = [];\n\n        if (!form.dnsprimary && !form.dnssecondary) {\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": []\n          };\n        }\n\n        if (form.dnsprimary && !form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`);\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`]\n          };\n        }\n\n        if (!form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(\"\");\n          dnsserver.push(`${form.dnssecondary}`);\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          };\n        }\n\n        if (form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`);\n          dnsserver.push(`${form.dnssecondary}`);\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          };\n        }\n\n        console.log(JSON.stringify(config));\n        let result = Validation.validateNetConfig(config);\n        console.log(`Se imprime el result de la validacion que trae? ${JSON.stringify(result)}`);\n\n        if (result.count > 0) {\n          let error = `${Object.keys(result.errors)[0]}`;\n          console.log(`Esto contiene error ${error}`);\n\n          switch (error) {\n            case \"adddress\":\n              setErrors({\n                address: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"gateway\":\n              setErrors({\n                gateway: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"netmask\":\n              setErrors({\n                netmask: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"dnsprimary\":\n              setErrors({\n                dnsprimary: Object.values(result.errors)[0]\n              });\n              break;\n\n            case \"dnssecondary\":\n              setErrors({\n                dnssecondary: Object.values(result.errors)[0]\n              });\n              break;\n\n            default:\n              break;\n          }\n        } else {\n          api.setNetworkConfigStatic(result.input, function (res) {\n            console.log(`Esta es la respuesta del set static ${JSON.stringify(res)}`);\n\n            if (res.result === \"ok\") {\n              setResponseString(`Set Static Config Succes`);\n              setIsValid(true);\n              setTimeout(() => {\n                setIsValid(false);\n                form.address = \"\";\n                form.gateway = \"\";\n                form.dnsprimary = \"\";\n                form.dnssecondary = \"\";\n                props.onHide();\n              }, 3000);\n            } else {\n              setResponseString(`Set Static Config Error`);\n              setIsError(true);\n              setTimeout(() => {\n                setIsError(false);\n              }, 3000);\n            }\n          }, props.device, \"nerves\", props.pass);\n        }\n      }\n    } else {\n      console.log(radioSelected);\n      const config = {\n        \"method\": \"dhcp\"\n      };\n      let result = Validation.validateNetConfig(config);\n\n      if (result.count > 0) {\n        setResponseString(`Error in config`);\n        setIsError(true);\n        setTimeout(() => {\n          setIsError(false);\n        }, 3000);\n      } else {\n        //FIXME when i send valid config the nervesbackdoor doesent response ok?, i think the response is in the new ip previously config\n        //i dont need to cath the response?\n        api.setNetworkConfigDhcp(result.input, function (res) {\n          console.log(res);\n\n          if (res.result === \"ok\") {\n            setResponseString(`Set DHCP Config Succes`);\n            setIsValid(true);\n            setTimeout(() => {\n              setIsValid(false);\n              form.address = \"\";\n              form.gateway = \"\";\n              form.dnsprimary = \"\";\n              form.dnssecondary = \"\";\n              props.onHide();\n            }, 3000);\n          } else {\n            setResponseString(`Set DHCP Config Error`);\n            setIsError(true);\n            setTimeout(() => {\n              setIsError(false);\n            }, 3000);\n          }\n        }, props.device, \"nerves\", props.pass);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n    size: \"lg\",\n    backdrop: \"static\",\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    id: \"contained-modal-title-vcenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 17\n    }\n  }, \"Network Config\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    show: isValid,\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 21\n    }\n  }, responseString), /*#__PURE__*/React.createElement(Alert, {\n    show: isError,\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 21\n    }\n  }, responseString), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    as: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"radio\",\n    label: \"Obtain an IP address automatically\",\n    id: \"radiodhcp\",\n    onChange: ButtonSelectRadio_Click,\n    checked: stateRadioDhcp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"radio\",\n    label: \"Use the following IP address:\",\n    id: \"radiostatic\",\n    onChange: ButtonSelectRadio_Click,\n    checked: stateRadioStatic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 25\n    }\n  }, \"IP Address\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"IP Address\",\n    onChange: e => setField('address', e.target.value),\n    isInvalid: !!errors.address,\n    disabled: ipAddressDisabled,\n    value: form.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 29\n    }\n  }, errors.address))), /*#__PURE__*/React.createElement(Form.Label, {\n    as: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 25\n    }\n  }, \"Select Netmask\"), /*#__PURE__*/React.createElement(Col, {\n    xs: 3,\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    //</Col>className=\"form-control-custom\" //makes gray the control\n    as: \"select\",\n    bsPrefix: \"form-select\",\n    value: form.netmask,\n    disabled: netmaskDisabled,\n    isInvalid: !!errors.netmask,\n    onChange: e => setField('netmask', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.255.255.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 33\n    }\n  }, \"255.255.255.0\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.255.0.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 33\n    }\n  }, \"255.255.0.0\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.0.0.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 33\n    }\n  }, \"255.0.0.0\")), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 29\n    }\n  }, errors.netmask))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 25\n    }\n  }, \"Default Gateway\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Gateway\",\n    value: form.gateway,\n    disabled: gatewayDisabled,\n    isInvalid: !!errors.gateway,\n    onChange: e => setField('gateway', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 29\n    }\n  }, errors.gateway))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 25\n    }\n  }, \"Set DNS Servers:\")), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 25\n    }\n  }, \"Primary\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Primary DNS\",\n    value: form.dnsprimary,\n    disabled: dnsPrimaryDisabled,\n    isInvalid: !!errors.dnsprimary,\n    onChange: e => setField('dnsprimary', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 29\n    }\n  }, errors.dnsprimary))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 25\n    }\n  }, \"Secondary\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Secondary DNS\",\n    value: form.dnssecondary,\n    disabled: dnsSecondaryDisabled,\n    isInvalid: !!errors.dnssecondary,\n    onChange: e => setField('dnssecondary', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 29\n    }\n  }, errors.dnssecondary))), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: {\n      span: 10,\n      offset: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    direction: \"horizontal\",\n    gap: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    onClick: ButtonGetNetworkConfig_Click,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 17\n    }\n  }, \"Get Config\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    onClick: ButtonSetNetworkConfig_Click,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 17\n    }\n  }, \"Set Config\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    onClick: props.onHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 17\n    }\n  }, \"Close\")));\n}\n\nexport default Network;","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/Network.js"],"names":["React","useState","api","Validation","Col","Row","Form","Alert","Modal","Stack","Button","Network","props","useEffect","getNetworkConfigOnload","console","log","setGetNetworkConfigOnload","radioSelected","setRadioSelected","stateRadioDhcp","setStateRadioDhcp","stateRadioStatic","setStateRadioStatic","ipAddressDisabled","setIpAddressdDisabled","gatewayDisabled","setGatewayDisabled","netmaskDisabled","setNetmaskDisabled","dnsPrimaryDisabled","setDnsPrimaryDisabled","dnsSecondaryDisabled","setDnsSecondaryDisabled","form","setForm","address","gateway","netmask","dnsprimary","dnssecondary","errors","setErrors","responseString","setResponseString","isValid","setIsValid","isError","setIsError","ButtonSelectRadio_Click","event","target","id","setDisabledComponents","state","parseIP","key","addresswithpoints","JSON","stringify","replace","validateIPaddress","ipaddress","test","setField","field","value","findFormErrors","newErrors","ButtonGetNetworkConfig_Click","getNetworkConfig","res","result","message","config","ipv4","method","addressIp","prefix_length","name_servers","length","setTimeout","device","pass","ButtonSetNetworkConfig_Click","preventDefault","Object","keys","maskNodes","match","cidr","i","toString","dnsserver","push","validateNetConfig","count","error","values","setNetworkConfigStatic","input","onHide","setNetworkConfigDhcp","e","span","offset"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport api from './api'\nimport Validation from './Validation'\n\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Form from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\nimport Modal from 'react-bootstrap/Modal'\nimport Stack from 'react-bootstrap/Stack'\nimport Button from 'react-bootstrap/Button'\n\nfunction Network(props) {\n    useEffect(() => {\n        if (getNetworkConfigOnload) {\n            console.log(\"es true\")\n        }\n    })\n\n    const [getNetworkConfigOnload, setGetNetworkConfigOnload] = React.useState(false)\n    //radio selector\n    const [radioSelected, setRadioSelected] = React.useState(\"radiodhcp\")\n    const [stateRadioDhcp, setStateRadioDhcp] = React.useState(true)\n    const [stateRadioStatic, setStateRadioStatic] = React.useState(false)\n\n    //disable componets\n    const [ipAddressDisabled, setIpAddressdDisabled] = React.useState(true);\n    const [gatewayDisabled, setGatewayDisabled] = React.useState(true);\n    const [netmaskDisabled, setNetmaskDisabled] = React.useState(true);\n    const [dnsPrimaryDisabled, setDnsPrimaryDisabled] = React.useState(true);\n    const [dnsSecondaryDisabled, setDnsSecondaryDisabled] = React.useState(true);\n\n    //Errors\n    const [form, setForm] = useState({ address: \"\", gateway: \"\", netmask: \"255.255.255.0\", dnsprimary: \"\", dnssecondary: \"\" })\n    const [errors, setErrors] = useState({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n\n    //Response from yeico appliance\n    const [responseString, setResponseString] = React.useState(\"\")\n\n    //Alerts\n    const [isValid, setIsValid] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    function ButtonSelectRadio_Click(event) {\n        if (event.target.id === \"radiodhcp\") {\n            setStateRadioDhcp(true)\n            setStateRadioStatic(false)\n            setDisabledComponents(true)\n        }\n        else {\n            setStateRadioDhcp(false)\n            setStateRadioStatic(true)\n            setDisabledComponents(false)\n        }\n        setRadioSelected(`${event.target.id}`)\n        console.log(radioSelected)\n    }\n\n    function setDisabledComponents(state) {\n        setIpAddressdDisabled(state)\n        setGatewayDisabled(state)\n        setNetmaskDisabled(state)\n        setDnsPrimaryDisabled(state)\n        setDnsSecondaryDisabled(state)\n    }\n\n    function parseIP(key) {\n        var addresswithpoints = `${JSON.stringify(key)}`.replace(/,/g, \".\")\n        return addresswithpoints.replace(/[[\\]']/g, \"\")\n    }\n\n    function validateIPaddress(ipaddress) {\n        if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {\n            return (true)\n        }\n        return (false)\n    }\n\n    const setField = (field, value) => {\n        setForm({\n            ...form,\n            [field]: value\n        })\n        // Check and see if errors exist, and remove them from the error object:\n        if (!!errors[field]) setErrors({\n            ...errors,\n            [field]: null\n        })\n    }\n\n    const findFormErrors = () => {\n        const { address, gateway, netmask, dnsprimary, dnssecondary } = form\n        const newErrors = {}\n        // name errors\n        if (!address || !validateIPaddress(address)) newErrors.address = 'IP has invalid format'\n        if (address === '') newErrors.address = 'This field is required'\n        if (!gateway || gateway === '' || !validateIPaddress(gateway)) newErrors.gateway = 'IP has invalid format'\n        if (!netmask || netmask === '' || !validateIPaddress(netmask)) newErrors.netmask = 'IP has invalid format'\n        if (dnsprimary) {\n            if (!dnsprimary || !validateIPaddress(dnsprimary)) newErrors.dnsprimary = 'IP has invalid format'\n        }\n        if (dnssecondary) {\n            if (!dnssecondary || !validateIPaddress(dnssecondary)) newErrors.dnssecondary = 'IP has invalid format'\n        }\n        return newErrors\n    }\n\n    function ButtonGetNetworkConfig_Click() {\n        console.log(\"clicked in get config\");\n        api.getNetworkConfig(function (res) {\n            console.log(res)\n            if (res.result === \"ok\") {\n                if (res.message.config.ipv4.method === \"dhcp\") {\n                    setRadioSelected(\"radiodhcp\");\n                    form.address = \"\"\n                    form.gateway = \"\"\n                    form.dnsprimary = \"\"\n                    form.dnssecondary = \"\"\n                    setStateRadioDhcp(true)\n                    setStateRadioStatic(false)\n                    setDisabledComponents(true)\n                }\n                else //is static\n                {\n                    setRadioSelected(\"radiostatic\");\n                    setStateRadioDhcp(false)\n                    setStateRadioStatic(true)\n                    setDisabledComponents(false)\n\n                    var addressIp = \"\";\n                    switch (res.message.config.ipv4.prefix_length) {\n                        case 8:\n                            addressIp = \"255.0.0.0\"\n                            break;\n                        case 16:\n                            addressIp = \"255.255.0.0\"\n                            break;\n                        default:\n                            addressIp = \"255.255.255.0\"\n                    }\n                    form.address = parseIP(res.message.config.ipv4.address)\n                    form.gateway = parseIP(res.message.config.ipv4.gateway)\n                    form.netmask = addressIp\n                    if (res.message.config.ipv4.name_servers.length === 0) {\n                        form.dnsprimary = \"\"\n                        form.dnssecondary = \"\"\n                    }\n                    if (res.message.config.ipv4.name_servers.length === 1) {\n                        form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n                        form.dnssecondary = \"\"\n                    }\n                    if (res.message.config.ipv4.name_servers.length === 2) {\n                        form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n                        form.dnssecondary = parseIP(res.message.config.ipv4.name_servers[1])\n                    }\n                }\n                setResponseString(`Get Config Success`)\n                setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n                setIsValid(true)\n                setTimeout(() => {\n                    setIsValid(false)\n                }, 3000);\n            }\n            else { //is error in the response\n                setResponseString(`Get Config Error`)\n                setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n                setIsError(true)\n                setTimeout(() => {\n                    setIsError(false)\n                }, 3000);\n            }\n        }, props.device, \"nerves\", props.pass)\n    }\n\n    //SetConfig\n    const ButtonSetNetworkConfig_Click = (event) => {\n        event.preventDefault()\n        //the config is static\n        console.log(`Esto es lo realmente seleccionado esta bieb? ${radioSelected}`)\n        if (radioSelected === \"radiostatic\") {\n            // get our new errors\n            const newErrors = findFormErrors()\n            // Conditional logic:\n            if (Object.keys(newErrors).length > 0) {\n                // We got errors!\n                setErrors(newErrors)\n            }\n            else {\n\n                console.log(`\n              address: ${form.address}\n              gateway: ${form.gateway}\n              netmask: ${form.netmask}\n              server primary: ${form.dnsprimary}\n              server secondary: ${form.dnssecondary}\n            `)\n                var maskNodes = form.netmask.match(/(\\d+)/g);\n                var cidr = 0;\n                for (var i in maskNodes) {\n                    cidr += (((maskNodes[i] >>> 0).toString(2)).match(/1/g) || []).length;\n                }\n\n                var config = \"\"\n                var dnsserver = []\n                if (!form.dnsprimary && !form.dnssecondary) {\n                    config = {\n                        \"method\": \"static\",\n                        \"address\": `${form.address}`,\n                        \"prefix_length\": cidr,\n                        \"gateway\": `${form.gateway}`,\n                        \"name_servers\": []\n                    }\n                }\n                if (form.dnsprimary && !form.dnssecondary) {\n                    dnsserver.push(`${form.dnsprimary}`)\n                    config = {\n                        \"method\": \"static\",\n                        \"address\": `${form.address}`,\n                        \"prefix_length\": cidr,\n                        \"gateway\": `${form.gateway}`,\n                        \"name_servers\": [`${dnsserver[0]}`]\n                    }\n                }\n                if (!form.dnsprimary && form.dnssecondary) {\n                    dnsserver.push(\"\")\n                    dnsserver.push(`${form.dnssecondary}`)\n                    config = {\n                        \"method\": \"static\",\n                        \"address\": `${form.address}`,\n                        \"prefix_length\": cidr,\n                        \"gateway\": `${form.gateway}`,\n                        \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n                    }\n                }\n                if (form.dnsprimary && form.dnssecondary) {\n                    dnsserver.push(`${form.dnsprimary}`)\n                    dnsserver.push(`${form.dnssecondary}`)\n                    config = {\n                        \"method\": \"static\",\n                        \"address\": `${form.address}`,\n                        \"prefix_length\": cidr,\n                        \"gateway\": `${form.gateway}`,\n                        \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n                    }\n                }\n                console.log(JSON.stringify(config))\n                let result = Validation.validateNetConfig(config)\n                console.log(`Se imprime el result de la validacion que trae? ${JSON.stringify(result)}`)\n                if (result.count > 0) {\n                    let error = `${Object.keys(result.errors)[0]}`\n                    console.log(`Esto contiene error ${error}`)\n                    switch (error) {\n                        case \"adddress\":\n                            setErrors({ address: Object.values(result.errors)[0] })\n                            break\n                        case \"gateway\":\n                            setErrors({ gateway: Object.values(result.errors)[0] })\n                            break\n                        case \"netmask\":\n                            setErrors({ netmask: Object.values(result.errors)[0] })\n                            break\n                        case \"dnsprimary\":\n                            setErrors({ dnsprimary: Object.values(result.errors)[0] })\n                            break\n                        case \"dnssecondary\":\n                            setErrors({ dnssecondary: Object.values(result.errors)[0] })\n                            break\n                        default:\n                            break\n                    }\n                }\n                else {\n                    api.setNetworkConfigStatic(result.input, function (res) {\n                        console.log(`Esta es la respuesta del set static ${JSON.stringify(res)}`)\n                        if (res.result === \"ok\") {\n                            setResponseString(`Set Static Config Succes`)\n                            setIsValid(true)\n                            setTimeout(() => {\n                                setIsValid(false)\n                                form.address = \"\"\n                                form.gateway = \"\"\n                                form.dnsprimary = \"\"\n                                form.dnssecondary = \"\"\n                                props.onHide()\n                            }, 3000);\n\n                        }\n                        else {\n                            setResponseString(`Set Static Config Error`)\n                            setIsError(true)\n                            setTimeout(() => {\n                                setIsError(false)\n                            }, 3000);\n                        }\n                    }, props.device, \"nerves\", props.pass);\n                }\n            }\n        }\n        else {\n            console.log(radioSelected)\n            const config = {\n                \"method\": \"dhcp\"\n            }\n            let result = Validation.validateNetConfig(config)\n            if (result.count > 0) {\n                setResponseString(`Error in config`)\n                setIsError(true)\n                setTimeout(() => {\n                    setIsError(false)\n                }, 3000);\n            }\n            else {\n                //FIXME when i send valid config the nervesbackdoor doesent response ok?, i think the response is in the new ip previously config\n                //i dont need to cath the response?\n                api.setNetworkConfigDhcp(result.input, function (res) {\n                    console.log(res)\n                    if (res.result === \"ok\") {\n                        setResponseString(`Set DHCP Config Succes`)\n                        setIsValid(true)\n                        setTimeout(() => {\n                            setIsValid(false)\n                            form.address = \"\"\n                            form.gateway = \"\"\n                            form.dnsprimary = \"\"\n                            form.dnssecondary = \"\"\n                            props.onHide()\n                        }, 3000);\n                    }\n                    else {\n                        setResponseString(`Set DHCP Config Error`)\n                        setIsError(true)\n                        setTimeout(() => {\n                            setIsError(false)\n                        }, 3000);\n                    }\n                }, props.device, \"nerves\", props.pass);\n            }\n        }\n    }\n\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            backdrop=\"static\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Network Config\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Alert show={isValid} variant=\"success\">\n                        {responseString}\n                    </Alert>\n                    <Alert show={isError} variant=\"danger\">\n                        {responseString}\n                    </Alert>\n                    <Form.Group className=\"mb-1\">\n                        <Form.Label as=\"legend\">\n                        </Form.Label>\n                        <Col align=\"left\">\n                            <Form.Check\n                                type=\"radio\"\n                                label=\"Obtain an IP address automatically\"\n                                id=\"radiodhcp\"\n                                onChange={ButtonSelectRadio_Click}\n                                checked={stateRadioDhcp}\n                            />\n                            <Form.Check\n                                type=\"radio\"\n                                label=\"Use the following IP address:\"\n                                id=\"radiostatic\"\n                                onChange={ButtonSelectRadio_Click}\n                                checked={stateRadioStatic}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-2\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            IP Address\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"IP Address\"\n                                onChange={e => setField('address', e.target.value)}\n                                isInvalid={!!errors.address}\n                                disabled={ipAddressDisabled}\n                                value={form.address}\n                            />\n                            <Form.Control.Feedback type='invalid'>{errors.address}</Form.Control.Feedback>\n                        </Col>\n                    </Form.Group>\n                    <Form.Label as=\"legend\">\n                    </Form.Label>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Select Netmask\n                        </Form.Label>\n                        <Col xs={3} align=\"left\">\n                            <Form.Control\n                                //</Col>className=\"form-control-custom\" //makes gray the control\n                                as=\"select\"\n                                bsPrefix={\"form-select\"}\n                                value={form.netmask}\n                                disabled={netmaskDisabled}\n                                isInvalid={!!errors.netmask}\n                                onChange={e => setField('netmask', e.target.value)}\n                            >\n                                <option value=\"255.255.255.0\">255.255.255.0</option>\n                                <option value=\"255.255.0.0\">255.255.0.0</option>\n                                <option value=\"255.0.0.0\">255.0.0.0</option>\n                            </Form.Control>\n                            <Form.Control.Feedback type='invalid'>{errors.netmask}</Form.Control.Feedback>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Default Gateway\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"Gateway\"\n                                value={form.gateway}\n                                disabled={gatewayDisabled}\n                                isInvalid={!!errors.gateway}\n                                onChange={e => setField('gateway', e.target.value)}\n                            />\n                            <Form.Control.Feedback type='invalid'>{errors.gateway}</Form.Control.Feedback>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Set DNS Servers:\n                        </Form.Label>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Primary\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"Primary DNS\"\n                                value={form.dnsprimary}\n                                disabled={dnsPrimaryDisabled}\n                                isInvalid={!!errors.dnsprimary}\n                                onChange={e => setField('dnsprimary', e.target.value)}\n                            />\n                            <Form.Control.Feedback type='invalid'>{errors.dnsprimary}</Form.Control.Feedback>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Secondary\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"Secondary DNS\"\n                                value={form.dnssecondary}\n                                disabled={dnsSecondaryDisabled}\n                                isInvalid={!!errors.dnssecondary}\n                                onChange={e => setField('dnssecondary', e.target.value)}\n                            />\n                            <Form.Control.Feedback type='invalid'>{errors.dnssecondary}</Form.Control.Feedback>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Col sm={{ span: 10, offset: 2 }}>\n                            <Stack direction=\"horizontal\" gap={3}>\n\n                            </Stack>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant='dark' onClick={ButtonGetNetworkConfig_Click}>Get Config</Button>\n                <Button variant='dark' onClick={ButtonSetNetworkConfig_Click}>Set Config</Button>\n                <Button variant='dark' onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal >\n    );\n}\n\nexport default Network;"]},"metadata":{},"sourceType":"module"}