{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var Netmask, atob, chr, chr0, chrA, chra, ip2long, long2ip;\n\n  long2ip = function long2ip(long) {\n    var a, b, c, d;\n    a = (long & 0xff << 24) >>> 24;\n    b = (long & 0xff << 16) >>> 16;\n    c = (long & 0xff << 8) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function ip2long(ip) {\n    var b, c, i, j, n, ref;\n    b = [];\n\n    for (i = j = 0; j <= 3; i = ++j) {\n      if (ip.length === 0) {\n        break;\n      }\n\n      if (i > 0) {\n        if (ip[0] !== '.') {\n          throw new Error('Invalid IP');\n        }\n\n        ip = ip.substring(1);\n      }\n\n      ref = atob(ip), n = ref[0], c = ref[1];\n      ip = ip.substring(c);\n      b.push(n);\n    }\n\n    if (ip.length !== 0) {\n      throw new Error('Invalid IP');\n    }\n\n    switch (b.length) {\n      case 1:\n        if (b[0] > 0xFFFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return b[0] >>> 0;\n\n      case 2:\n        if (b[0] > 0xFF || b[1] > 0xFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return (b[0] << 24 | b[1]) >>> 0;\n\n      case 3:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;\n\n      case 4:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;\n\n      default:\n        throw new Error('Invalid IP');\n    }\n  };\n\n  chr = function chr(b) {\n    return b.charCodeAt(0);\n  };\n\n  chr0 = chr('0');\n  chra = chr('a');\n  chrA = chr('A');\n\n  atob = function atob(s) {\n    var base, dmax, i, n, start;\n    n = 0;\n    base = 10;\n    dmax = '9';\n    i = 0;\n\n    if (s.length > 1 && s[i] === '0') {\n      if (s[i + 1] === 'x' || s[i + 1] === 'X') {\n        i += 2;\n        base = 16;\n      } else if ('0' <= s[i + 1] && s[i + 1] <= '9') {\n        i++;\n        base = 8;\n        dmax = '7';\n      }\n    }\n\n    start = i;\n\n    while (i < s.length) {\n      if ('0' <= s[i] && s[i] <= dmax) {\n        n = n * base + (chr(s[i]) - chr0) >>> 0;\n      } else if (base === 16) {\n        if ('a' <= s[i] && s[i] <= 'f') {\n          n = n * base + (10 + chr(s[i]) - chra) >>> 0;\n        } else if ('A' <= s[i] && s[i] <= 'F') {\n          n = n * base + (10 + chr(s[i]) - chrA) >>> 0;\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n\n      if (n > 0xFFFFFFFF) {\n        throw new Error('too large');\n      }\n\n      i++;\n    }\n\n    if (i === start) {\n      throw new Error('empty octet');\n    }\n\n    return [n, i];\n  };\n\n  Netmask = function () {\n    function Netmask(net, mask) {\n      var error, i, j, ref;\n\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n\n      if (!mask) {\n        mask = 32;\n      }\n\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === 0xffffffff << 32 - i >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask || mask === 0) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n\n        if (this.bitmask > 0) {\n          this.maskLong = 0xffffffff << 32 - this.bitmask >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error1) {\n        error = error1;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function (ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function (count) {\n      if (count == null) {\n        count = 1;\n      }\n\n      return new Netmask(long2ip(this.netLong + this.size * count), this.mask);\n    };\n\n    Netmask.prototype.forEach = function (fn) {\n      var index, lastLong, long;\n      long = ip2long(this.first);\n      lastLong = ip2long(this.last);\n      index = 0;\n\n      while (long <= lastLong) {\n        fn(long2ip(long), long, index);\n        index++;\n        long++;\n      }\n    };\n\n    Netmask.prototype.toString = function () {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n  }();\n\n  exports.ip2long = ip2long;\n  exports.long2ip = long2ip;\n  exports.Netmask = Netmask;\n}).call(this);","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/node_modules/netmask/lib/netmask.js"],"names":["Netmask","atob","chr","chr0","chrA","chra","ip2long","long2ip","long","a","b","c","d","join","ip","i","j","n","ref","length","Error","substring","push","charCodeAt","s","base","dmax","start","net","mask","error","split","indexOf","maskLong","error1","bitmask","parseInt","netLong","size","Math","pow","hostmask","first","last","broadcast","prototype","contains","next","count","forEach","fn","index","lastLong","toString","exports","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var Netmask, atob, chr, chr0, chrA, chra, ip2long, long2ip;\n\n  long2ip = function(long) {\n    var a, b, c, d;\n    a = (long & (0xff << 24)) >>> 24;\n    b = (long & (0xff << 16)) >>> 16;\n    c = (long & (0xff << 8)) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function(ip) {\n    var b, c, i, j, n, ref;\n    b = [];\n    for (i = j = 0; j <= 3; i = ++j) {\n      if (ip.length === 0) {\n        break;\n      }\n      if (i > 0) {\n        if (ip[0] !== '.') {\n          throw new Error('Invalid IP');\n        }\n        ip = ip.substring(1);\n      }\n      ref = atob(ip), n = ref[0], c = ref[1];\n      ip = ip.substring(c);\n      b.push(n);\n    }\n    if (ip.length !== 0) {\n      throw new Error('Invalid IP');\n    }\n    switch (b.length) {\n      case 1:\n        if (b[0] > 0xFFFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return b[0] >>> 0;\n      case 2:\n        if (b[0] > 0xFF || b[1] > 0xFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1]) >>> 0;\n      case 3:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;\n      case 4:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;\n      default:\n        throw new Error('Invalid IP');\n    }\n  };\n\n  chr = function(b) {\n    return b.charCodeAt(0);\n  };\n\n  chr0 = chr('0');\n\n  chra = chr('a');\n\n  chrA = chr('A');\n\n  atob = function(s) {\n    var base, dmax, i, n, start;\n    n = 0;\n    base = 10;\n    dmax = '9';\n    i = 0;\n    if (s.length > 1 && s[i] === '0') {\n      if (s[i + 1] === 'x' || s[i + 1] === 'X') {\n        i += 2;\n        base = 16;\n      } else if ('0' <= s[i + 1] && s[i + 1] <= '9') {\n        i++;\n        base = 8;\n        dmax = '7';\n      }\n    }\n    start = i;\n    while (i < s.length) {\n      if ('0' <= s[i] && s[i] <= dmax) {\n        n = (n * base + (chr(s[i]) - chr0)) >>> 0;\n      } else if (base === 16) {\n        if ('a' <= s[i] && s[i] <= 'f') {\n          n = (n * base + (10 + chr(s[i]) - chra)) >>> 0;\n        } else if ('A' <= s[i] && s[i] <= 'F') {\n          n = (n * base + (10 + chr(s[i]) - chrA)) >>> 0;\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      if (n > 0xFFFFFFFF) {\n        throw new Error('too large');\n      }\n      i++;\n    }\n    if (i === start) {\n      throw new Error('empty octet');\n    }\n    return [n, i];\n  };\n\n  Netmask = (function() {\n    function Netmask(net, mask) {\n      var error, i, j, ref;\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n      if (!mask) {\n        mask = 32;\n      }\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === (0xffffffff << (32 - i)) >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask || mask === 0) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n        if (this.bitmask > 0) {\n          this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error1) {\n        error = error1;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function(ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function(count) {\n      if (count == null) {\n        count = 1;\n      }\n      return new Netmask(long2ip(this.netLong + (this.size * count)), this.mask);\n    };\n\n    Netmask.prototype.forEach = function(fn) {\n      var index, lastLong, long;\n      long = ip2long(this.first);\n      lastLong = ip2long(this.last);\n      index = 0;\n      while (long <= lastLong) {\n        fn(long2ip(long), long, index);\n        index++;\n        long++;\n      }\n    };\n\n    Netmask.prototype.toString = function() {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n\n  })();\n\n  exports.ip2long = ip2long;\n\n  exports.long2ip = long2ip;\n\n  exports.Netmask = Netmask;\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}