{"ast":null,"code":"var _jsxFileName = \"/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/ModalNetwork.js\";\nimport React, { useState } from 'react';\nimport api from './api';\nimport Validation from './Validation';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport Modal from 'react-bootstrap/Modal';\nimport Stack from 'react-bootstrap/Stack';\nimport Button from 'react-bootstrap/Button';\n\nfunction ModalNetwork(props) {\n  //radio selector\n  const [radioSelected, setRadioSelected] = React.useState(\"radiodhcp\");\n  const [stateRadioDhcp, setStateRadioDhcp] = React.useState(true);\n  const [stateRadioStatic, setStateRadioStatic] = React.useState(false); //disable componets\n\n  const [ipAddressDisabled, setIpAddressdDisabled] = React.useState(true);\n  const [gatewayDisabled, setGatewayDisabled] = React.useState(true);\n  const [netmaskDisabled, setNetmaskDisabled] = React.useState(true);\n  const [dnsPrimaryDisabled, setDnsPrimaryDisabled] = React.useState(true);\n  const [dnsSecondaryDisabled, setDnsSecondaryDisabled] = React.useState(true); //Errors\n\n  const [form, setForm] = useState({\n    address: \"\",\n    gateway: \"\",\n    netmask: \"255.255.255.0\",\n    dnsprimary: \"\",\n    dnssecondary: \"\"\n  });\n  const [errors, setErrors] = useState({\n    address: \"\",\n    gateway: \"\",\n    netmask: \"\",\n    dnsprimary: \"\",\n    dnssecondary: \"\"\n  }); //Response from yeico appliance\n\n  const [responseString, setResponseString] = React.useState(\"\"); //Alerts\n\n  const [isValid, setIsValid] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  function ButtonSelectRadio_Click(event) {\n    if (event.target.id === \"radiodhcp\") {\n      setStateRadioDhcp(true);\n      setStateRadioStatic(false);\n      setDisabledComponents(true);\n    } else {\n      setStateRadioDhcp(false);\n      setStateRadioStatic(true);\n      setDisabledComponents(false);\n    }\n\n    setRadioSelected(`${event.target.id}`);\n    console.log(radioSelected);\n  }\n\n  function setDisabledComponents(state) {\n    setIpAddressdDisabled(state);\n    setGatewayDisabled(state);\n    setNetmaskDisabled(state);\n    setDnsPrimaryDisabled(state);\n    setDnsSecondaryDisabled(state);\n  }\n\n  function parseIP(key) {\n    var addresswithpoints = `${JSON.stringify(key)}`.replace(/,/g, \".\");\n    return addresswithpoints.replace(/[[\\]']/g, \"\");\n  }\n\n  const setField = (field, value) => {\n    setForm({ ...form,\n      [field]: value\n    }); // Check and see if errors exist, and remove them from the error object:\n\n    if (!!errors[field]) setErrors({ ...errors,\n      [field]: null\n    });\n  };\n\n  function ButtonGetNetworkConfig_Click() {\n    console.log(\"clicked in get config\");\n    api.getNetworkConfig(function (res) {\n      console.log(res);\n\n      if (res.result === \"ok\") {\n        if (res.message.config.ipv4.method === \"dhcp\") {\n          setRadioSelected(\"radiodhcp\");\n          form.address = \"\";\n          form.gateway = \"\";\n          form.dnsprimary = \"\";\n          form.dnssecondary = \"\";\n          setStateRadioDhcp(true);\n          setStateRadioStatic(false);\n          setDisabledComponents(true);\n        } else //is static\n          {\n            setRadioSelected(\"radiostatic\");\n            setStateRadioDhcp(false);\n            setStateRadioStatic(true);\n            setDisabledComponents(false);\n            var addressIp = \"\";\n\n            switch (res.message.config.ipv4.prefix_length) {\n              case 8:\n                addressIp = \"255.0.0.0\";\n                break;\n\n              case 16:\n                addressIp = \"255.255.0.0\";\n                break;\n\n              default:\n                addressIp = \"255.255.255.0\";\n            }\n\n            form.address = parseIP(res.message.config.ipv4.address);\n            form.gateway = parseIP(res.message.config.ipv4.gateway);\n            form.netmask = addressIp;\n\n            if (res.message.config.ipv4.name_servers.length === 0) {\n              form.dnsprimary = \"\";\n              form.dnssecondary = \"\";\n            }\n\n            if (res.message.config.ipv4.name_servers.length === 1) {\n              form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0]);\n              form.dnssecondary = \"\";\n            }\n\n            if (res.message.config.ipv4.name_servers.length === 2) {\n              form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0]);\n              form.dnssecondary = parseIP(res.message.config.ipv4.name_servers[1]);\n            }\n          }\n\n        setResponseString(`Get Config Success`);\n        setErrors({\n          address: \"\",\n          gateway: \"\",\n          netmask: \"\",\n          dnsprimary: \"\",\n          dnssecondary: \"\"\n        });\n        setIsValid(true);\n        setTimeout(() => {\n          setIsValid(false);\n        }, 3000);\n      } else {\n        //is error in the response\n        setResponseString(`Get Config Error`);\n        setErrors({\n          address: \"\",\n          gateway: \"\",\n          netmask: \"\",\n          dnsprimary: \"\",\n          dnssecondary: \"\"\n        });\n        setIsError(true);\n        setTimeout(() => {\n          setIsError(false);\n        }, 3000);\n      }\n    }, props.device);\n  } //SetConfig\n\n\n  const ButtonSetNetworkConfig_Click = event => {\n    event.preventDefault(); //the config is static\n\n    console.log(`Esto es lo realmente seleccionado esta bieb? ${radioSelected}`);\n\n    if (radioSelected === \"radiostatic\") {\n      console.log(`\n              address: ${form.address}\n              gateway: ${form.gateway}\n              netmask: ${form.netmask}\n              server primary: ${form.dnsprimary}\n              server secondary: ${form.dnssecondary}\n            `);\n      var maskNodes = form.netmask.match(/(\\d+)/g);\n      var cidr = 0;\n\n      for (var i in maskNodes) {\n        cidr += ((maskNodes[i] >>> 0).toString(2).match(/1/g) || []).length;\n      }\n\n      var config = \"\";\n      var dnsserver = [];\n\n      if (!form.dnsprimary && !form.dnssecondary) {\n        config = {\n          \"method\": \"static\",\n          \"address\": `${form.address}`,\n          \"prefix_length\": cidr,\n          \"gateway\": `${form.gateway}`,\n          \"name_servers\": []\n        };\n      }\n\n      if (form.dnsprimary && !form.dnssecondary) {\n        dnsserver.push(`${form.dnsprimary}`);\n        config = {\n          \"method\": \"static\",\n          \"address\": `${form.address}`,\n          \"prefix_length\": cidr,\n          \"gateway\": `${form.gateway}`,\n          \"name_servers\": [`${dnsserver[0]}`]\n        };\n      }\n\n      if (!form.dnsprimary && form.dnssecondary) {\n        dnsserver.push(\"\");\n        dnsserver.push(`${form.dnssecondary}`);\n        config = {\n          \"method\": \"static\",\n          \"address\": `${form.address}`,\n          \"prefix_length\": cidr,\n          \"gateway\": `${form.gateway}`,\n          \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n        };\n      }\n\n      if (form.dnsprimary && form.dnssecondary) {\n        dnsserver.push(`${form.dnsprimary}`);\n        dnsserver.push(`${form.dnssecondary}`);\n        config = {\n          \"method\": \"static\",\n          \"address\": `${form.address}`,\n          \"prefix_length\": cidr,\n          \"gateway\": `${form.gateway}`,\n          \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n        };\n      }\n\n      console.log(JSON.stringify(config));\n      let result = Validation.validateNetConfig(config);\n      console.log(`Se imprime el result de la validacion que trae? ${JSON.stringify(result)}`);\n\n      if (result.count > 0) {\n        let error = `${Object.keys(result.errors)[0]}`;\n        console.log(`Esto contiene error ${error}`);\n\n        switch (error) {\n          case \"adddress\":\n            setErrors({\n              address: Object.values(result.errors)[0]\n            });\n            break;\n\n          case \"gateway\":\n            setErrors({\n              gateway: Object.values(result.errors)[0]\n            });\n            break;\n\n          case \"netmask\":\n            setErrors({\n              netmask: Object.values(result.errors)[0]\n            });\n            break;\n\n          case \"dnsprimary\":\n            setErrors({\n              dnsprimary: Object.values(result.errors)[0]\n            });\n            break;\n\n          case \"dnssecondary\":\n            setErrors({\n              dnssecondary: Object.values(result.errors)[0]\n            });\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        api.setNetworkConfigStatic(result.input, function (res) {\n          if (res.result === \"ok\") {\n            setResponseString(`Set Static Config Succes`);\n            setIsValid(true);\n            setTimeout(() => {\n              setIsValid(false);\n            }, 3000);\n          } else {\n            setResponseString(`Set Static Config Error`);\n            setIsError(true);\n            setTimeout(() => {\n              setIsError(false);\n            }, 3000);\n          }\n        }, props.device);\n      }\n    } else {\n      console.log(radioSelected);\n      const config = {\n        \"method\": \"dhcp\"\n      };\n      let result = Validation.validateNetConfig(config);\n\n      if (result.count > 0) {\n        setResponseString(`Error in config`);\n        setIsError(true);\n        setTimeout(() => {\n          setIsError(false);\n        }, 3000);\n      } else {\n        api.setNetworkConfigDhcp(result.input, function (res) {\n          console.log(res);\n\n          if (res.result === \"ok\") {\n            setResponseString(`Set DHCP Config Succes`);\n            setIsValid(true);\n            setTimeout(() => {\n              setIsValid(false);\n            }, 3000);\n          } else {\n            setResponseString(`Set DHCP Config Error`);\n            setIsError(true);\n            setTimeout(() => {\n              setIsError(false);\n            }, 3000);\n          }\n        }, props.device);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n    size: \"lg\",\n    backdrop: \"static\",\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    id: \"contained-modal-title-vcenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }\n  }, \"Network Config\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    show: isValid,\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 21\n    }\n  }, responseString), /*#__PURE__*/React.createElement(Alert, {\n    show: isError,\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 21\n    }\n  }, responseString), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    as: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"radio\",\n    label: \"Obtain an IP address automatically\",\n    id: \"radiodhcp\",\n    onChange: ButtonSelectRadio_Click,\n    checked: stateRadioDhcp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"radio\",\n    label: \"Use the following IP address:\",\n    id: \"radiostatic\",\n    onChange: ButtonSelectRadio_Click,\n    checked: stateRadioStatic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 25\n    }\n  }, \"IP Address\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"IP Address\",\n    onChange: e => setField('address', e.target.value),\n    isInvalid: !!errors.address,\n    disabled: ipAddressDisabled,\n    value: form.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 29\n    }\n  }, errors.address))), /*#__PURE__*/React.createElement(Form.Label, {\n    as: \"legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 25\n    }\n  }, \"Select Netmask\"), /*#__PURE__*/React.createElement(Col, {\n    xs: 3,\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    //</Col>className=\"form-control-custom\" //makes gray the control\n    as: \"select\",\n    bsPrefix: \"form-select\",\n    value: form.netmask,\n    disabled: netmaskDisabled,\n    onChange: e => setField('netmask', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.255.255.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 33\n    }\n  }, \"255.255.255.0\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.255.0.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 33\n    }\n  }, \"255.255.0.0\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"255.0.0.0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 33\n    }\n  }, \"255.0.0.0\")))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 25\n    }\n  }, \"Default Gateway\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Gateway\",\n    value: form.gateway,\n    disabled: gatewayDisabled,\n    onChange: e => setField('gateway', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 25\n    }\n  }, \"Set DNS Servers:\")), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 25\n    }\n  }, \"Primary\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Primary DNS\",\n    value: form.dnsprimary,\n    disabled: dnsPrimaryDisabled,\n    onChange: e => setField('dnsprimary', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Row,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    align: \"right\",\n    column: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 25\n    }\n  }, \"Secondary\"), /*#__PURE__*/React.createElement(Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    placeholder: \"Secondary DNS\",\n    value: form.dnssecondary,\n    disabled: dnsSecondaryDisabled,\n    onChange: e => setField('dnssecondary', e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    sm: {\n      span: 10,\n      offset: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    direction: \"horizontal\",\n    gap: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: ButtonGetNetworkConfig_Click,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }, \"Get Config\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: ButtonSetNetworkConfig_Click,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }\n  }, \"Set Config\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: props.onHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 17\n    }\n  }, \"Close\")));\n}\n\nexport default ModalNetwork;","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/ModalNetwork.js"],"names":["React","useState","api","Validation","Col","Row","Form","Alert","Modal","Stack","Button","ModalNetwork","props","radioSelected","setRadioSelected","stateRadioDhcp","setStateRadioDhcp","stateRadioStatic","setStateRadioStatic","ipAddressDisabled","setIpAddressdDisabled","gatewayDisabled","setGatewayDisabled","netmaskDisabled","setNetmaskDisabled","dnsPrimaryDisabled","setDnsPrimaryDisabled","dnsSecondaryDisabled","setDnsSecondaryDisabled","form","setForm","address","gateway","netmask","dnsprimary","dnssecondary","errors","setErrors","responseString","setResponseString","isValid","setIsValid","isError","setIsError","ButtonSelectRadio_Click","event","target","id","setDisabledComponents","console","log","state","parseIP","key","addresswithpoints","JSON","stringify","replace","setField","field","value","ButtonGetNetworkConfig_Click","getNetworkConfig","res","result","message","config","ipv4","method","addressIp","prefix_length","name_servers","length","setTimeout","device","ButtonSetNetworkConfig_Click","preventDefault","maskNodes","match","cidr","i","toString","dnsserver","push","validateNetConfig","count","error","Object","keys","values","setNetworkConfigStatic","input","setNetworkConfigDhcp","e","span","offset","onHide"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport api from './api'\nimport Validation from './Validation'\n\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Form from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\nimport Modal from 'react-bootstrap/Modal'\nimport Stack from 'react-bootstrap/Stack'\nimport Button from 'react-bootstrap/Button'\n\nfunction ModalNetwork(props) {\n    //radio selector\n    const [radioSelected, setRadioSelected] = React.useState(\"radiodhcp\")\n    const [stateRadioDhcp, setStateRadioDhcp] = React.useState(true)\n    const [stateRadioStatic, setStateRadioStatic] = React.useState(false)\n\n    //disable componets\n    const [ipAddressDisabled, setIpAddressdDisabled] = React.useState(true);\n    const [gatewayDisabled, setGatewayDisabled] = React.useState(true);\n    const [netmaskDisabled, setNetmaskDisabled] = React.useState(true);\n    const [dnsPrimaryDisabled, setDnsPrimaryDisabled] = React.useState(true);\n    const [dnsSecondaryDisabled, setDnsSecondaryDisabled] = React.useState(true);\n\n    //Errors\n    const [form, setForm] = useState({ address: \"\", gateway: \"\", netmask: \"255.255.255.0\", dnsprimary: \"\", dnssecondary: \"\" })\n    const [errors, setErrors] = useState({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n\n    //Response from yeico appliance\n    const [responseString, setResponseString] = React.useState(\"\")\n\n    //Alerts\n    const [isValid, setIsValid] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    function ButtonSelectRadio_Click(event) {\n        if (event.target.id === \"radiodhcp\") {\n            setStateRadioDhcp(true)\n            setStateRadioStatic(false)\n            setDisabledComponents(true)\n        }\n        else {\n            setStateRadioDhcp(false)\n            setStateRadioStatic(true)\n            setDisabledComponents(false)\n        }\n        setRadioSelected(`${event.target.id}`)\n        console.log(radioSelected)\n    }\n\n    function setDisabledComponents(state) {\n        setIpAddressdDisabled(state)\n        setGatewayDisabled(state)\n        setNetmaskDisabled(state)\n        setDnsPrimaryDisabled(state)\n        setDnsSecondaryDisabled(state)\n    }\n\n    function parseIP(key) {\n        var addresswithpoints = `${JSON.stringify(key)}`.replace(/,/g, \".\")\n        return addresswithpoints.replace(/[[\\]']/g, \"\")\n    }\n\n    const setField = (field, value) => {\n        setForm({\n            ...form,\n            [field]: value\n        })\n        // Check and see if errors exist, and remove them from the error object:\n        if (!!errors[field]) setErrors({\n            ...errors,\n            [field]: null\n        })\n    }\n\n    function ButtonGetNetworkConfig_Click() {\n        console.log(\"clicked in get config\");\n        api.getNetworkConfig(function (res) {\n            console.log(res)\n            if (res.result === \"ok\") {\n                if (res.message.config.ipv4.method === \"dhcp\") {\n                    setRadioSelected(\"radiodhcp\");\n                    form.address = \"\"\n                    form.gateway = \"\"\n                    form.dnsprimary = \"\"\n                    form.dnssecondary = \"\"\n                    setStateRadioDhcp(true)\n                    setStateRadioStatic(false)\n                    setDisabledComponents(true)\n                }\n                else //is static\n                {\n                    setRadioSelected(\"radiostatic\");\n                    setStateRadioDhcp(false)\n                    setStateRadioStatic(true)\n                    setDisabledComponents(false)\n\n                    var addressIp = \"\";\n                    switch (res.message.config.ipv4.prefix_length) {\n                        case 8:\n                            addressIp = \"255.0.0.0\"\n                            break;\n                        case 16:\n                            addressIp = \"255.255.0.0\"\n                            break;\n                        default:\n                            addressIp = \"255.255.255.0\"\n                    }\n                    form.address = parseIP(res.message.config.ipv4.address)\n                    form.gateway = parseIP(res.message.config.ipv4.gateway)\n                    form.netmask = addressIp\n                    if (res.message.config.ipv4.name_servers.length === 0) {\n                        form.dnsprimary = \"\"\n                        form.dnssecondary = \"\"\n                    }\n                    if (res.message.config.ipv4.name_servers.length === 1) {\n                        form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n                        form.dnssecondary = \"\"\n                    }\n                    if (res.message.config.ipv4.name_servers.length === 2) {\n                        form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n                        form.dnssecondary = parseIP(res.message.config.ipv4.name_servers[1])\n                    }\n                }\n                setResponseString(`Get Config Success`)\n                setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n                setIsValid(true)\n                setTimeout(() => {\n                    setIsValid(false)\n                }, 3000);\n            }\n            else { //is error in the response\n                setResponseString(`Get Config Error`)\n                setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n                setIsError(true)\n                setTimeout(() => {\n                    setIsError(false)\n                }, 3000);\n            }\n        }, props.device)\n    }\n\n    //SetConfig\n    const ButtonSetNetworkConfig_Click = (event) => {\n        event.preventDefault()\n        //the config is static\n        console.log(`Esto es lo realmente seleccionado esta bieb? ${radioSelected}`)\n        if (radioSelected === \"radiostatic\") {\n            console.log(`\n              address: ${form.address}\n              gateway: ${form.gateway}\n              netmask: ${form.netmask}\n              server primary: ${form.dnsprimary}\n              server secondary: ${form.dnssecondary}\n            `)\n            var maskNodes = form.netmask.match(/(\\d+)/g);\n            var cidr = 0;\n            for (var i in maskNodes) {\n                cidr += (((maskNodes[i] >>> 0).toString(2)).match(/1/g) || []).length;\n            }\n\n            var config = \"\"\n            var dnsserver = []\n            if (!form.dnsprimary && !form.dnssecondary) {\n                config = {\n                    \"method\": \"static\",\n                    \"address\": `${form.address}`,\n                    \"prefix_length\": cidr,\n                    \"gateway\": `${form.gateway}`,\n                    \"name_servers\": []\n                }\n            }\n            if (form.dnsprimary && !form.dnssecondary) {\n                dnsserver.push(`${form.dnsprimary}`)\n                config = {\n                    \"method\": \"static\",\n                    \"address\": `${form.address}`,\n                    \"prefix_length\": cidr,\n                    \"gateway\": `${form.gateway}`,\n                    \"name_servers\": [`${dnsserver[0]}`]\n                }\n            }\n            if (!form.dnsprimary && form.dnssecondary) {\n                dnsserver.push(\"\")\n                dnsserver.push(`${form.dnssecondary}`)\n                config = {\n                    \"method\": \"static\",\n                    \"address\": `${form.address}`,\n                    \"prefix_length\": cidr,\n                    \"gateway\": `${form.gateway}`,\n                    \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n                }\n            }\n            if (form.dnsprimary && form.dnssecondary) {\n                dnsserver.push(`${form.dnsprimary}`)\n                dnsserver.push(`${form.dnssecondary}`)\n                config = {\n                    \"method\": \"static\",\n                    \"address\": `${form.address}`,\n                    \"prefix_length\": cidr,\n                    \"gateway\": `${form.gateway}`,\n                    \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n                }\n            }\n            console.log(JSON.stringify(config))\n            let result = Validation.validateNetConfig(config)\n            console.log(`Se imprime el result de la validacion que trae? ${JSON.stringify(result)}`)\n            if (result.count > 0) {\n                let error = `${Object.keys(result.errors)[0]}`\n                console.log(`Esto contiene error ${error}`)\n                switch (error) {\n                    case \"adddress\":\n                        setErrors({ address: Object.values(result.errors)[0] })\n                        break\n                    case \"gateway\":\n                        setErrors({ gateway: Object.values(result.errors)[0] })\n                        break\n                    case \"netmask\":\n                        setErrors({ netmask: Object.values(result.errors)[0] })\n                        break\n                    case \"dnsprimary\":\n                        setErrors({ dnsprimary: Object.values(result.errors)[0] })\n                        break\n                    case \"dnssecondary\":\n                        setErrors({ dnssecondary: Object.values(result.errors)[0] })\n                        break\n                    default:\n                        break\n                }\n            }\n            else {\n                api.setNetworkConfigStatic(result.input, function (res) {\n                    if (res.result === \"ok\") {\n                        setResponseString(`Set Static Config Succes`)\n                        setIsValid(true)\n                        setTimeout(() => {\n                            setIsValid(false)\n                        }, 3000);\n                    }\n                    else {\n                        setResponseString(`Set Static Config Error`)\n                        setIsError(true)\n                        setTimeout(() => {\n                            setIsError(false)\n                        }, 3000);\n                    }\n                }, props.device);\n            }\n        }\n        else {\n            console.log(radioSelected)\n            const config = {\n                \"method\": \"dhcp\"\n            }\n            let result = Validation.validateNetConfig(config)\n            if (result.count > 0) {\n                setResponseString(`Error in config`)\n                setIsError(true)\n                setTimeout(() => {\n                    setIsError(false)\n                }, 3000);\n            }\n            else {\n                api.setNetworkConfigDhcp(result.input, function (res) {\n                    console.log(res)\n                    if (res.result === \"ok\") {\n                        setResponseString(`Set DHCP Config Succes`)\n                        setIsValid(true)\n                        setTimeout(() => {\n                            setIsValid(false)\n                        }, 3000);\n                    }\n                    else {\n                        setResponseString(`Set DHCP Config Error`)\n                        setIsError(true)\n                        setTimeout(() => {\n                            setIsError(false)\n                        }, 3000);\n                    }\n                }, props.device);\n            }\n        }\n    }\n\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            backdrop=\"static\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Network Config\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Alert show={isValid} variant=\"success\">\n                        {responseString}\n                    </Alert>\n                    <Alert show={isError} variant=\"danger\">\n                        {responseString}\n                    </Alert>\n                    <Form.Group className=\"mb-1\">\n                        <Form.Label as=\"legend\">\n                        </Form.Label>\n                        <Col align=\"left\">\n                            <Form.Check\n                                type=\"radio\"\n                                label=\"Obtain an IP address automatically\"\n                                id=\"radiodhcp\"\n                                onChange={ButtonSelectRadio_Click}\n                                checked={stateRadioDhcp}\n                            />\n                            <Form.Check\n                                type=\"radio\"\n                                label=\"Use the following IP address:\"\n                                id=\"radiostatic\"\n                                onChange={ButtonSelectRadio_Click}\n                                checked={stateRadioStatic}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-2\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            IP Address\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"IP Address\"\n                                onChange={e => setField('address', e.target.value)}\n                                isInvalid={!!errors.address}\n                                disabled={ipAddressDisabled}\n                                value={form.address}\n                            />\n                            <Form.Control.Feedback type='invalid'>{errors.address}</Form.Control.Feedback>\n                        </Col>\n                    </Form.Group>\n                    <Form.Label as=\"legend\">\n                    </Form.Label>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Select Netmask\n                        </Form.Label>\n                        <Col xs={3} align=\"left\">\n                            <Form.Control\n                                //</Col>className=\"form-control-custom\" //makes gray the control\n                                as=\"select\"\n                                bsPrefix={\"form-select\"}\n                                value={form.netmask}\n                                disabled={netmaskDisabled}\n                                onChange={e => setField('netmask', e.target.value)}\n                            >\n                                <option value=\"255.255.255.0\">255.255.255.0</option>\n                                <option value=\"255.255.0.0\">255.255.0.0</option>\n                                <option value=\"255.0.0.0\">255.0.0.0</option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Default Gateway\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"Gateway\"\n                                value={form.gateway}\n                                disabled={gatewayDisabled}\n                                onChange={e => setField('gateway', e.target.value)}\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Set DNS Servers:\n                        </Form.Label>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Primary\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"Primary DNS\"\n                                value={form.dnsprimary}\n                                disabled={dnsPrimaryDisabled}\n                                onChange={e => setField('dnsprimary', e.target.value)}\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label align=\"right\" column sm={3}>\n                            Secondary\n                        </Form.Label>\n                        <Col sm={8}>\n                            <Form.Control\n                                placeholder=\"Secondary DNS\"\n                                value={form.dnssecondary}\n                                disabled={dnsSecondaryDisabled}\n                                onChange={e => setField('dnssecondary', e.target.value)}\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Col sm={{ span: 10, offset: 2 }}>\n                            <Stack direction=\"horizontal\" gap={3}>\n\n                            </Stack>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={ButtonGetNetworkConfig_Click}>Get Config</Button>\n                <Button onClick={ButtonSetNetworkConfig_Click}>Set Config</Button>\n                <Button onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal >\n    );\n}\n\nexport default ModalNetwork;"]},"metadata":{},"sourceType":"module"}