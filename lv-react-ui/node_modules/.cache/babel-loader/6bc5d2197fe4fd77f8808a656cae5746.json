{"ast":null,"code":"function setNetworkConfigDhcp(config, cb, ip) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': 'Basic ' + Buffer.from(`${username}:${pass}`).toString('base64')\n    }\n  }).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction setNetworkConfigStatic(config, cb, ip) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkConfig(cb, ip) {\n  fetch(`http://${ip}:31680/net/state/eth0`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkPing(cb, ip, pass) {\n  const username = \"nerves\";\n  fetch(`http://${ip}:31680/ping`, {\n    headers: {\n      'Authorization': 'Basic ' + Buffer.from(`${username}:${pass}`).toString('base64')\n    }\n  }).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction blinkNetworkDevice(cb, ip) {\n  fetch(`blink/${ip}`).then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nfunction getNetworkDiscover(cb) {\n  fetch(\"discovery/2\").then(res => res.json()).then(json => cb(json)).catch(err => cb(err));\n}\n\nconst exports = {\n  setNetworkConfigDhcp,\n  getNetworkConfig,\n  getNetworkPing,\n  setNetworkConfigStatic,\n  getNetworkDiscover,\n  blinkNetworkDevice\n};\nexport default exports;","map":{"version":3,"sources":["/home/hiram/github/hiram-repos/tryouts/lv-react-ui/src/api.js"],"names":["setNetworkConfigDhcp","config","cb","ip","fetch","method","body","JSON","stringify","headers","Buffer","from","username","pass","toString","then","res","json","catch","err","setNetworkConfigStatic","getNetworkConfig","getNetworkPing","blinkNetworkDevice","getNetworkDiscover","exports"],"mappings":"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","sourcesContent":["function setNetworkConfigDhcp(config, cb, ip) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      'Authorization': 'Basic ' + Buffer.from(`${username}:${pass}`).toString('base64')\n    }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction setNetworkConfigStatic(config, cb, ip) {\n  fetch(`http://${ip}:31680/net/setup/eth0`, {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkConfig(cb, ip) {\n  fetch(`http://${ip}:31680/net/state/eth0`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkPing(cb, ip, pass) {\n  const username = \"nerves\"\n  fetch(`http://${ip}:31680/ping`, {\n    headers: { 'Authorization': 'Basic ' + Buffer.from(`${username}:${pass}`).toString('base64') }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction blinkNetworkDevice(cb, ip) {\n  fetch(`blink/${ip}`)\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkDiscover(cb) {\n  fetch(\"discovery/2\")\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nconst exports = {\n  setNetworkConfigDhcp,\n  getNetworkConfig,\n  getNetworkPing,\n  setNetworkConfigStatic,\n  getNetworkDiscover,\n  blinkNetworkDevice,\n}\n\nexport default exports"]},"metadata":{},"sourceType":"module"}