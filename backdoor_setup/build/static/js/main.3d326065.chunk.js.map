{"version":3,"sources":["api.js","ValidationIp.js","Validation.js","Network.js","Database.js","Utils.js","App.js","reportWebVitals.js","index.js"],"names":["exports","setNetworkConfigDhcp","config","cb","fetch","method","body","JSON","stringify","headers","then","res","json","catch","err","getNetworkConfig","getNetworkPing","setNetworkConfigStatic","getNetworkDiscover","validateIp","ip","trim","length","test","addToError","result","name","message","errors","count","validateIpStructure","error","ValidationIp","validateNetConfig","input","address","prefixLength","Number","isInteger","indexOf","checkPrefixLength","prefix_length","gateway","ipNetmask","Netmask","contains","checkGatewayIsinNetmask","checkNameServersLength","name_servers","Network","React","useState","radioSelected","setRadioSelected","stateRadioDhcp","setStateRadioDhcp","stateRadioStatic","setStateRadioStatic","netmask","dnsprimary","dnssecondary","form","setForm","setErrors","ipAddressDisabled","setIpAddressdDisabled","gatewayDisabled","setGatewayDisabled","netmaskDisabled","setNetmaskDisabled","dnsPrimaryDisabled","setDnsPrimaryDisabled","dnsSecondaryDisabled","setDnsSecondaryDisabled","responseString","setResponseString","isValid","setIsValid","isError","setIsError","validateIPaddress","ipaddress","setDisabledComponents","state","parseIP","key","replace","ButtonSelectRadio_Click","event","target","id","console","log","setField","field","value","findFormErrors","newErrors","Form","Alert","show","variant","Group","as","Row","className","Label","column","sm","Col","align","Check","type","label","onChange","checked","Control","placeholder","e","isInvalid","disabled","Feedback","xs","bsPrefix","span","offset","Stack","direction","gap","Button","onClick","api","ipv4","addressIp","setTimeout","preventDefault","Object","keys","maskNodes","match","cidr","i","toString","dnsserver","push","Validation","values","Database","md","files","Utils","Card","style","width","Img","src","Body","Title","Text","App","tab","setTab","Nav","activeKey","onSelect","eventKey","Item","Link","renderContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d326065.chunk.js","sourcesContent":["function setNetworkConfigDhcp(config, cb) {\n  fetch(\"/net/setup/eth0\", {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction setNetworkConfigStatic(config, cb) {\n  fetch(\"/net/setup/eth0\", {\n    method: \"post\",\n    body: JSON.stringify(config),\n    headers: { \"Content-Type\": \"application/json\" }\n  })\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkConfig(cb) {\n  fetch(\"/net/state/eth0\")\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nfunction getNetworkPing(cb) {\n  fetch(\"/ping\")\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\n\nfunction getNetworkDiscover(cb) {\n  fetch(\"Discovery/2\")\n    .then(res => res.json())\n    .then(json => cb(json))\n    .catch(err => cb(err))\n}\n\nconst exports = {\n  setNetworkConfigDhcp,\n  getNetworkConfig,\n  getNetworkPing,\n  setNetworkConfigStatic,\n  getNetworkDiscover,\n}\n\nexport default exports","\nconst validateIp = function (ip) {\n    ip = ip || \"\"\n    if (ip.trim().length === 0) {\n        return \"IP cannot be empty\"\n    }\n    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip) === false) {\n        return \"IP has invalid format\"\n    }\n}\n\nconst exports = {\n    validateIp,\n}\n\nexport default exports","import { Netmask } from 'netmask' //https://stackoverflow.com/questions/503052/javascript-is-ip-in-one-of-these-subnets\nimport ValidationIp from './ValidationIp'\n\nconst addToError = function (result, name, message) {\n    result.errors[name] = message\n    result.count++\n}\n\nconst validateIpStructure = function (result, ip, name) {\n    ip = ip || \"\"\n    let error = ValidationIp.validateIp(ip)\n    if (error) {\n        addToError(result, name, error)\n    }\n}\n\nconst checkPrefixLength = function (result, prefixLength, name) {\n    if (!Number.isInteger(prefixLength)) {\n        addToError(result, name, \"Prefix length should be a number\")\n        return\n    }\n    if ([8, 16, 24].indexOf(prefixLength) < 0) {\n        addToError(result, name, \"Invalida prefix length\")\n        return\n    }\n}\n\nconst checkNameServersLength = function (result, length, name) {\n    if ([0, 1, 2].indexOf(length) < 0) {\n        addToError(result, name, \"Invalid name servers length\")\n        return\n    }\n}\n\nconst checkGatewayIsinNetmask = function (result, gateway, ipNetmask, name) {\n    const block = new Netmask(ipNetmask)\n    const ip = gateway\n    if (!block.contains(ip)) {\n        addToError(result, name, \"Invalid gateway segment\")\n        return\n    }\n}\n\nconst validateNetConfig = function (input) {\n    const result = { count: 0, errors: {}, input }\n    switch (input.method) {\n        case \"dhcp\":\n            break\n        case \"static\":\n            validateIpStructure(result, input.address, \"address\")\n            checkPrefixLength(result, input.prefix_length, \"prefix_length\")\n            validateIpStructure(result, input.gateway, \"gateway\")\n            if (result.count === 0) {\n                checkGatewayIsinNetmask(result, input.gateway, `${input.address}/${input.prefix_length}`, \"gateway\")\n            }\n            checkNameServersLength(result, input.name_servers.length, \"nameservers_length\")\n            if (input.name_servers.length > 0) {\n                validateIpStructure(result, input.name_servers[0], \"dnsprimary\")\n            }\n            if (input.name_servers.length > 1) {\n                validateIpStructure(result, input.name_servers[1], \"dnssecondary\")\n            }\n            break\n        default:\n            addToError(result, \"method\", \"invalid method\")\n            break\n    }\n    return result\n}\n\nconst exports = {\n    validateIpStructure,\n    validateNetConfig,\n}\n\nexport default exports","import { useState } from 'react'\n\nimport './App.css';\nimport api from \"./api\"\nimport React from \"react\"\nimport Validation from './Validation'\n\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Form from 'react-bootstrap/Form'\nimport Alert from 'react-bootstrap/Alert'\nimport Stack from 'react-bootstrap/Stack'\nimport Button from 'react-bootstrap/Button'\n\nfunction Network() {\n  //radio selector\n  const [radioSelected, setRadioSelected] = React.useState(\"radiodhcp\")\n  const [stateRadioDhcp, setStateRadioDhcp] = React.useState(true)\n  const [stateRadioStatic, setStateRadioStatic] = React.useState(false)\n\n  //Errors\n  const [form, setForm] = useState({ address: \"\", gateway: \"\", netmask: \"255.255.255.0\", dnsprimary: \"\", dnssecondary: \"\" })\n  const [errors, setErrors] = useState({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n\n  //disable componets\n  const [ipAddressDisabled, setIpAddressdDisabled] = React.useState(true);\n  const [gatewayDisabled, setGatewayDisabled] = React.useState(true);\n  const [netmaskDisabled, setNetmaskDisabled] = React.useState(true);\n  const [dnsPrimaryDisabled, setDnsPrimaryDisabled] = React.useState(true);\n  const [dnsSecondaryDisabled, setDnsSecondaryDisabled] = React.useState(true);\n\n  //Response from yeico appliance\n  const [responseString, setResponseString] = React.useState(\"\")\n\n  //Alerts\n  const [isValid, setIsValid] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  function validateIPaddress(ipaddress) {\n    if (/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipaddress)) {\n      return (true)\n    }\n    return (false)\n  }\n\n  function setDisabledComponents(state) {\n    setIpAddressdDisabled(state)\n    setGatewayDisabled(state)\n    setNetmaskDisabled(state)\n    setDnsPrimaryDisabled(state)\n    setDnsSecondaryDisabled(state)\n  }\n\n  function parseIP(key) {\n    var addresswithpoints = `${JSON.stringify(key)}`.replace(/,/g, \".\")\n    return addresswithpoints.replace(/[[\\]']/g, \"\")\n  }\n\n  //manage state radios\n  function ButtonSelectRadio_Click(event) {\n    if (event.target.id === \"radiodhcp\") {\n      setStateRadioDhcp(true)\n      setStateRadioStatic(false)\n      setDisabledComponents(true)\n    }\n    else {\n      setStateRadioDhcp(false)\n      setStateRadioStatic(true)\n      setDisabledComponents(false)\n    }\n    setRadioSelected(event.target.id)\n    console.log(radioSelected)\n  }\n\n  function ButtonPing_Click() {\n    console.log(\"clicked in Ping\")\n    api.getNetworkPing(function (res) {\n      console.log(`Respuesta del ping ${JSON.stringify(res)}`)\n      if (res.result === \"ok\") {\n        setResponseString(`Ping Response Success`)\n        setIsValid(true)\n        setTimeout(() => {\n          setIsValid(false)\n        }, 3000);\n      }\n      else {\n        setResponseString(`Ping Response Error`)\n        setIsError(true)\n        setTimeout(() => {\n          setIsError(false)\n        }, 3000);\n      }\n    })\n  }\n\n  function ButtonGetNetworkConfig_Click() {\n    console.log(\"clicked in get config\");\n    api.getNetworkConfig(function (res) {\n      console.log(res)\n      if (res.result === \"ok\") {\n        if (res.message.config.ipv4.method === \"dhcp\") {\n          setRadioSelected(\"radiodhcp\");\n          form.address = \"\"\n          form.gateway = \"\"\n          form.dnsprimary = \"\"\n          form.dnssecondary = \"\"\n          setStateRadioDhcp(true)\n          setStateRadioStatic(false)\n          setDisabledComponents(true)\n        }\n        else //is static\n        {\n          setRadioSelected(\"radiostatic\");\n          setStateRadioDhcp(false)\n          setStateRadioStatic(true)\n          setDisabledComponents(false)\n\n          var addressIp = \"\";\n          switch (res.message.config.ipv4.prefix_length) {\n            case 8:\n              addressIp = \"255.0.0.0\"\n              break;\n            case 16:\n              addressIp = \"255.255.0.0\"\n              break;\n            default:\n              addressIp = \"255.255.255.0\"\n          }\n          form.address = parseIP(res.message.config.ipv4.address)\n          form.gateway = parseIP(res.message.config.ipv4.gateway)\n          form.netmask = addressIp\n          if (res.message.config.ipv4.name_servers.length === 0) {\n            form.dnsprimary = \"\"\n            form.dnssecondary = \"\"\n          }\n          if (res.message.config.ipv4.name_servers.length === 1) {\n            form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n            form.dnssecondary = \"\"\n          }\n          if (res.message.config.ipv4.name_servers.length === 2) {\n            form.dnsprimary = parseIP(res.message.config.ipv4.name_servers[0])\n            form.dnssecondary = parseIP(res.message.config.ipv4.name_servers[1])\n          }\n        }\n        setResponseString(`Get Config Success`)\n        setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n        setIsValid(true)\n        setTimeout(() => {\n          setIsValid(false)\n        }, 3000);\n      }\n      else { //is error in the response\n        setResponseString(`Get Config Error`)\n        setErrors({ address: \"\", gateway: \"\", netmask: \"\", dnsprimary: \"\", dnssecondary: \"\" })\n        setIsError(true)\n        setTimeout(() => {\n          setIsError(false)\n        }, 3000);\n      }\n    })\n  }\n\n  const setField = (field, value) => {\n    setForm({\n      ...form,\n      [field]: value\n    })\n    // Check and see if errors exist, and remove them from the error object:\n    if (!!errors[field]) setErrors({\n      ...errors,\n      [field]: null\n    })\n  }\n\n  const ButtonSetNetworkConfig_Click = (event) => {\n    event.preventDefault()\n    //the config is static\n    if (radioSelected === \"radiostatic\") {\n      // get our new errors\n      const newErrors = findFormErrors()\n      // Conditional logic:\n      if (Object.keys(newErrors).length > 0) {\n        // We got errors!\n        setErrors(newErrors)\n      }\n      else {\n        // No errors! Put any logic here for the form submission!\n        console.log(`\n          address: ${form.address}\n          gateway: ${form.gateway}\n          netmask: ${form.netmask}\n          server primary: ${form.dnsprimary}\n          server secondary: ${form.dnssecondary}\n        `)\n        var maskNodes = form.netmask.match(/(\\d+)/g);\n        var cidr = 0;\n        for (var i in maskNodes) {\n          cidr += (((maskNodes[i] >>> 0).toString(2)).match(/1/g) || []).length;\n        }\n\n        var config = \"\"\n        var dnsserver = []\n        if (!form.dnsprimary && !form.dnssecondary) {\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": []\n          }\n        }\n        if (form.dnsprimary && !form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`)\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`]\n          }\n        }\n        if (!form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(\"\")\n          dnsserver.push(`${form.dnssecondary}`)\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          }\n        }\n        if (form.dnsprimary && form.dnssecondary) {\n          dnsserver.push(`${form.dnsprimary}`)\n          dnsserver.push(`${form.dnssecondary}`)\n          config = {\n            \"method\": \"static\",\n            \"address\": `${form.address}`,\n            \"prefix_length\": cidr,\n            \"gateway\": `${form.gateway}`,\n            \"name_servers\": [`${dnsserver[0]}`, `${dnsserver[1]}`]\n          }\n        }\n        console.log(JSON.stringify(config))\n        let result = Validation.validateNetConfig(config)\n        if (result.count > 0) {\n          let error = `${Object.keys(result.errors)[0]}`\n          switch (error) {\n            case \"adddress\":\n              setErrors({ address: Object.values(result.errors)[0] })\n              break\n            case \"gateway\":\n              setErrors({ gateway: Object.values(result.errors)[0] })\n              break\n            case \"netmask\":\n              setErrors({ netmask: Object.values(result.errors)[0] })\n              break\n            case \"dnsprimary\":\n              setErrors({ dnsprimary: Object.values(result.errors)[0] })\n              break\n            case \"dnssecondary\":\n              setErrors({ dnssecondary: Object.values(result.errors)[0] })\n              break\n            default:\n              break\n          }\n        }\n        else {\n          api.setNetworkConfigStatic(result.input, function (res) {\n            if (res.result === \"ok\") {\n              setResponseString(`Set Static Config Succes`)\n              setIsValid(true)\n              setTimeout(() => {\n                setIsValid(false)\n              }, 3000);\n            }\n            else {\n              setResponseString(`Set Static Config Error`)\n              setIsError(true)\n              setTimeout(() => {\n                setIsError(false)\n              }, 3000);\n            }\n          });\n        }\n      }\n    }\n    else {\n      console.log(radioSelected)\n      const config = {\n        \"method\": \"dhcp\"\n      }\n      let result = Validation.validateNetConfig(config)\n      if (result.count > 0) {\n        setResponseString(`Error in config`)\n        setIsError(true)\n        setTimeout(() => {\n          setIsError(false)\n        }, 3000);\n      }\n      else {\n        api.setNetworkConfigDhcp(result.input, function (res) {\n          console.log(res)\n          if (res.result === \"ok\") {\n            setResponseString(`Set DHCP Config Succes`)\n            setIsValid(true)\n            setTimeout(() => {\n              setIsValid(false)\n            }, 3000);\n          }\n          else {\n            setResponseString(`Set DHCP Config Error`)\n            setIsError(true)\n            setTimeout(() => {\n              setIsError(false)\n            }, 3000);\n          }\n        });\n      }\n    }\n  }\n\n  const findFormErrors = () => {\n    const { address, gateway, netmask, dnsprimary, dnssecondary } = form\n    const newErrors = {}\n    // name errors\n    if (!address || !validateIPaddress(address)) newErrors.address = 'IP has invalid format'\n    if (address === '') newErrors.address = 'This field is required'\n    if (!gateway || gateway === '' || !validateIPaddress(gateway)) newErrors.gateway = 'IP has invalid format'\n    if (!netmask || netmask === '' || !validateIPaddress(netmask)) newErrors.netmask = 'IP has invalid format'\n    if (dnsprimary) {\n      if (!dnsprimary || !validateIPaddress(dnsprimary)) newErrors.dnsprimary = 'IP has invalid format'\n    }\n    if (dnssecondary) {\n      if (!dnssecondary || !validateIPaddress(dnssecondary)) newErrors.dnssecondary = 'IP has invalid format'\n    }\n    return newErrors\n  }\n\n  return (\n    <Form>\n      <h1>NETWORK</h1>\n      <Alert show={isValid} variant=\"success\">\n        {responseString}\n      </Alert>\n      <Alert show={isError} variant=\"danger\">\n        {responseString}\n      </Alert>\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label as=\"legend\" column sm={2}>\n        </Form.Label>\n        <Col sm={3} align=\"left\">\n          <Form.Check\n            type=\"radio\"\n            label=\"Obtain an IP address automatically\"\n            id=\"radiodhcp\"\n            onChange={ButtonSelectRadio_Click}\n            checked={stateRadioDhcp}\n          />\n          <Form.Check\n            type=\"radio\"\n            label=\"Use the following IP address:\"\n            id=\"radiostatic\"\n            onChange={ButtonSelectRadio_Click}\n            checked={stateRadioStatic}\n          />\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-2\">\n        <Form.Label align=\"right\" column sm={2}>\n          IP Address\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"IP Address\"\n            onChange={e => setField('address', e.target.value)}\n            isInvalid={!!errors.address}\n            disabled={ipAddressDisabled}\n            value={form.address}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.address}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Select Netmask\n        </Form.Label>\n        <Col xs={2} align=\"left\">\n          <Form.Control\n            //</Col>className=\"form-control-custom\" //makes gray the control\n            as=\"select\"\n            bsPrefix={\"form-select\"} //shows the control like a combobox\n            onChange={e => setField('netmask', e.target.value)}\n            isInvalid={!!errors.netmask}\n            disabled={netmaskDisabled}\n            value={form.netmask}\n          >\n            <option value=\"255.255.255.0\">255.255.255.0</option>\n            <option value=\"255.255.0.0\">255.255.0.0</option>\n            <option value=\"255.0.0.0\">255.0.0.0</option>\n          </Form.Control>\n          <Form.Control.Feedback type='invalid'>{errors.netmask}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Default Gateway\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"Gateway\"\n            onChange={e => setField('gateway', e.target.value)}\n            isInvalid={!!errors.gateway}\n            disabled={gatewayDisabled}\n            value={form.gateway}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.gateway}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Set DNS Servers:\n        </Form.Label>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Primary\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"Primary DNS\"\n            onChange={e => setField('dnsprimary', e.target.value)}\n            isInvalid={!!errors.dnsprimary}\n            disabled={dnsPrimaryDisabled}\n            value={form.dnsprimary}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.dnsprimary}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group as={Row} className=\"mb-3\">\n        <Form.Label align=\"right\" column sm={2}>\n          Secondary\n        </Form.Label>\n        <Col sm={8}>\n          <Form.Control\n            placeholder=\"Secondary DNS\"\n            onChange={e => setField('dnssecondary', e.target.value)}\n            isInvalid={!!errors.dnssecondary}\n            disabled={dnsSecondaryDisabled}\n            value={form.dnssecondary}\n          />\n          <Form.Control.Feedback type='invalid'>{errors.dnssecondary}</Form.Control.Feedback>\n        </Col>\n      </Form.Group>\n\n      <Form.Group>\n        <Col sm={{ span: 10, offset: 2 }}>\n          <Stack direction=\"horizontal\" gap={3}>\n            <Button onClick={ButtonGetNetworkConfig_Click}>Get Config</Button>\n            <Button onClick={ButtonSetNetworkConfig_Click}>Set Config</Button>\n            <Button onClick={ButtonPing_Click}>Ping</Button>\n          </Stack>\n        </Col>\n      </Form.Group>\n    </Form>\n  )\n}\n\nexport default Network;","import './App.css';\nimport React from \"react\";\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nfunction Database()\n{ \n  return (\n    <Form>\n      <h1>DATABASE</h1>\n      <Row>\n        <Col xs={6} md={8}>\n          <Form.Label align=\"left\">Select folder to backup</Form.Label>\n        </Col>\n        <Col xs={12} md={8}>\n        <Form.Control type=\"file\" onChange={(e) => console.log(e.target.files)} />\n        </Col>\n        <Col xs={12} md={8}>\n        <Col><Button>Backup</Button></Col>\n        </Col>\n      </Row>\n    </Form>\n  );\n}\n\nexport default Database;","import './App.css';\nimport api from \"./api\"\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\n\nimport React from \"react\"\n\nfunction Utils() {\n\n  const data = {\n    hostname: \"\",\n    ifname: \"\",\n    macaddr: \"\",\n    name: \"\",\n    version: \"\"\n  }\n\n  function buttonDiscoveryClick() {\n    api.getNetworkDiscover(function (res) {\n      console.log(res)\n    })\n  }\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={buttonDiscoveryClick}>\n        Discovery\n      </Button>\n\n      <Card style={{ width: '18rem' }}>\n        <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n        <Card.Body>\n          <Card.Title>Card Title</Card.Title>\n          <Card.Text>\n            Some quick example text to build on the card title and make up the bulk of\n            the card's content.\n          </Card.Text>\n          <Button variant=\"primary\">Go somewhere</Button>\n        </Card.Body>\n      </Card>\n    </>\n  )\n}\n\nexport default Utils;","import React, { useState } from 'react';\n\nimport Nav from 'react-bootstrap/Nav';\nimport Network from './Network';\nimport Database from './Database';\nimport Utils from './Utils';\nimport './App.css';\n\nfunction App() {\n  \n  const [tab, setTab] = useState(\"utils\");\n\n  function handleSelect(eventKey) {\n    console.log(eventKey)\n    setTab(eventKey)\n  }\n\n  function renderContent(eventKey) {\n    switch(eventKey) {\n      case \"network\":\n        return  (<Network/>);\n      case \"database\":\n        return  (<Database/>);\n      default:\n        return  (<Utils/>);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav variant=\"pills\" activeKey={tab} onSelect={handleSelect}>\n        <Nav.Item>\n          <Nav.Link eventKey=\"network\">Network</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"database\">Database</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"utils\">Utils</Nav.Link>\n        </Nav.Item>\n      </Nav>    \n     {renderContent(tab)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}